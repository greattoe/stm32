
HC_SR04_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cfc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003e08  08003e08  00004e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea8  08003ea8  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003ea8  08003ea8  00005068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003ea8  08003ea8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea8  08003ea8  00004ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003eac  08003eac  00004eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003eb0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000068  08003f18  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08003f18  00005324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec27  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f5  00000000  00000000  00013cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00015db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c0d  00000000  00000000  00016cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ed8  00000000  00000000  00017905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011dd2  00000000  00000000  000307dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e87c  00000000  00000000  000425af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0e2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004870  00000000  00000000  000d0e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d56e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003df0 	.word	0x08003df0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003df0 	.word	0x08003df0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fd91 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f875 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f9d3 	bl	8000504 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015e:	f000 f9a7 	bl	80004b0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000162:	f000 f8b1 	bl	80002c8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000166:	f000 f8dd 	bl	8000324 <MX_TIM1_Init>
  MX_TIM4_Init();
 800016a:	f000 f92b 	bl	80003c4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  timer_start();
 800016e:	f000 fd1d 	bl	8000bac <timer_start>
  printf("Ranging with HC-SR04\n");
 8000172:	482c      	ldr	r0, [pc, #176]	@ (8000224 <main+0xd8>)
 8000174:	f002 ffd0 	bl	8003118 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_dist_10times();
 8000178:	f000 fa6c 	bl	8000654 <get_dist_10times>
	  sort_array_dist();
 800017c:	f000 faa2 	bl	80006c4 <sort_array_dist>
	  dist_sum = 0;
 8000180:	4b29      	ldr	r3, [pc, #164]	@ (8000228 <main+0xdc>)
 8000182:	2200      	movs	r2, #0
 8000184:	801a      	strh	r2, [r3, #0]
	  for(int i = 0+2; i < 10-2; i++){
 8000186:	2302      	movs	r3, #2
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e00c      	b.n	80001a6 <main+0x5a>
		  dist_sum = dist_sum + dist[i];
 800018c:	4a27      	ldr	r2, [pc, #156]	@ (800022c <main+0xe0>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000194:	4b24      	ldr	r3, [pc, #144]	@ (8000228 <main+0xdc>)
 8000196:	881b      	ldrh	r3, [r3, #0]
 8000198:	4413      	add	r3, r2
 800019a:	b29a      	uxth	r2, r3
 800019c:	4b22      	ldr	r3, [pc, #136]	@ (8000228 <main+0xdc>)
 800019e:	801a      	strh	r2, [r3, #0]
	  for(int i = 0+2; i < 10-2; i++){
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	3301      	adds	r3, #1
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b07      	cmp	r3, #7
 80001aa:	ddef      	ble.n	800018c <main+0x40>
	  }
	  distance = dist_sum / 6;
 80001ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000228 <main+0xdc>)
 80001ae:	881b      	ldrh	r3, [r3, #0]
 80001b0:	4a1f      	ldr	r2, [pc, #124]	@ (8000230 <main+0xe4>)
 80001b2:	fba2 2303 	umull	r2, r3, r2, r3
 80001b6:	089b      	lsrs	r3, r3, #2
 80001b8:	b29a      	uxth	r2, r3
 80001ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000234 <main+0xe8>)
 80001bc:	801a      	strh	r2, [r3, #0]

	  if(out_of_range == TRUE)
 80001be:	4b1e      	ldr	r3, [pc, #120]	@ (8000238 <main+0xec>)
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	2b01      	cmp	r3, #1
 80001c4:	d103      	bne.n	80001ce <main+0x82>
		  printf("outof ranges!\n");
 80001c6:	481d      	ldr	r0, [pc, #116]	@ (800023c <main+0xf0>)
 80001c8:	f002 ffa6 	bl	8003118 <puts>
 80001cc:	e7d4      	b.n	8000178 <main+0x2c>
	  else
	  {
		  printf("distance = %d(mm)\n", distance);
 80001ce:	4b19      	ldr	r3, [pc, #100]	@ (8000234 <main+0xe8>)
 80001d0:	881b      	ldrh	r3, [r3, #0]
 80001d2:	4619      	mov	r1, r3
 80001d4:	481a      	ldr	r0, [pc, #104]	@ (8000240 <main+0xf4>)
 80001d6:	f002 ff37 	bl	8003048 <iprintf>
		  if(distance < 400) alarm(523, 100,  25);
 80001da:	4b16      	ldr	r3, [pc, #88]	@ (8000234 <main+0xe8>)
 80001dc:	881b      	ldrh	r3, [r3, #0]
 80001de:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80001e2:	d206      	bcs.n	80001f2 <main+0xa6>
 80001e4:	2219      	movs	r2, #25
 80001e6:	2164      	movs	r1, #100	@ 0x64
 80001e8:	f240 200b 	movw	r0, #523	@ 0x20b
 80001ec:	f000 faaa 	bl	8000744 <alarm>
 80001f0:	e7c2      	b.n	8000178 <main+0x2c>
		  else if(distance < 600) alarm(523, 150,  50);
 80001f2:	4b10      	ldr	r3, [pc, #64]	@ (8000234 <main+0xe8>)
 80001f4:	881b      	ldrh	r3, [r3, #0]
 80001f6:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80001fa:	d206      	bcs.n	800020a <main+0xbe>
 80001fc:	2232      	movs	r2, #50	@ 0x32
 80001fe:	2196      	movs	r1, #150	@ 0x96
 8000200:	f240 200b 	movw	r0, #523	@ 0x20b
 8000204:	f000 fa9e 	bl	8000744 <alarm>
 8000208:	e7b6      	b.n	8000178 <main+0x2c>
		  else if(distance < 800) alarm(523, 200,  100);
 800020a:	4b0a      	ldr	r3, [pc, #40]	@ (8000234 <main+0xe8>)
 800020c:	881b      	ldrh	r3, [r3, #0]
 800020e:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000212:	d2b1      	bcs.n	8000178 <main+0x2c>
 8000214:	2264      	movs	r2, #100	@ 0x64
 8000216:	21c8      	movs	r1, #200	@ 0xc8
 8000218:	f240 200b 	movw	r0, #523	@ 0x20b
 800021c:	f000 fa92 	bl	8000744 <alarm>
	  get_dist_10times();
 8000220:	e7aa      	b.n	8000178 <main+0x2c>
 8000222:	bf00      	nop
 8000224:	08003e08 	.word	0x08003e08
 8000228:	200001ca 	.word	0x200001ca
 800022c:	200001b4 	.word	0x200001b4
 8000230:	aaaaaaab 	.word	0xaaaaaaab
 8000234:	200001cc 	.word	0x200001cc
 8000238:	200001c8 	.word	0x200001c8
 800023c:	08003e20 	.word	0x08003e20
 8000240:	08003e30 	.word	0x08003e30

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b090      	sub	sp, #64	@ 0x40
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	2228      	movs	r2, #40	@ 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f003 f840 	bl	80032d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000266:	2302      	movs	r3, #2
 8000268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026a:	2301      	movs	r3, #1
 800026c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026e:	2310      	movs	r3, #16
 8000270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000272:	2302      	movs	r3, #2
 8000274:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000276:	2300      	movs	r3, #0
 8000278:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800027a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800027e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000280:	f107 0318 	add.w	r3, r7, #24
 8000284:	4618      	mov	r0, r3
 8000286:	f001 f959 	bl	800153c <HAL_RCC_OscConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000290:	f000 fa90 	bl	80007b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	230f      	movs	r3, #15
 8000296:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000298:	2302      	movs	r3, #2
 800029a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2102      	movs	r1, #2
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 fbc6 	bl	8001a40 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ba:	f000 fa7b 	bl	80007b4 <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3740      	adds	r7, #64	@ 0x40
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002cc:	4b12      	ldr	r3, [pc, #72]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002ce:	4a13      	ldr	r2, [pc, #76]	@ (800031c <MX_I2C1_Init+0x54>)
 80002d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002d2:	4b11      	ldr	r3, [pc, #68]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002d4:	4a12      	ldr	r2, [pc, #72]	@ (8000320 <MX_I2C1_Init+0x58>)
 80002d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002de:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002f2:	4b09      	ldr	r3, [pc, #36]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f8:	4b07      	ldr	r3, [pc, #28]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002fe:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <MX_I2C1_Init+0x50>)
 8000300:	2200      	movs	r2, #0
 8000302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000304:	4804      	ldr	r0, [pc, #16]	@ (8000318 <MX_I2C1_Init+0x50>)
 8000306:	f000 ffd5 	bl	80012b4 <HAL_I2C_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000310:	f000 fa50 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000084 	.word	0x20000084
 800031c:	40005400 	.word	0x40005400
 8000320:	000186a0 	.word	0x000186a0

08000324 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800032a:	f107 0308 	add.w	r3, r7, #8
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000338:	463b      	mov	r3, r7
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000340:	4b1e      	ldr	r3, [pc, #120]	@ (80003bc <MX_TIM1_Init+0x98>)
 8000342:	4a1f      	ldr	r2, [pc, #124]	@ (80003c0 <MX_TIM1_Init+0x9c>)
 8000344:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8000346:	4b1d      	ldr	r3, [pc, #116]	@ (80003bc <MX_TIM1_Init+0x98>)
 8000348:	223f      	movs	r2, #63	@ 0x3f
 800034a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800034c:	4b1b      	ldr	r3, [pc, #108]	@ (80003bc <MX_TIM1_Init+0x98>)
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000352:	4b1a      	ldr	r3, [pc, #104]	@ (80003bc <MX_TIM1_Init+0x98>)
 8000354:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000358:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800035a:	4b18      	ldr	r3, [pc, #96]	@ (80003bc <MX_TIM1_Init+0x98>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000360:	4b16      	ldr	r3, [pc, #88]	@ (80003bc <MX_TIM1_Init+0x98>)
 8000362:	2200      	movs	r2, #0
 8000364:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000366:	4b15      	ldr	r3, [pc, #84]	@ (80003bc <MX_TIM1_Init+0x98>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800036c:	4813      	ldr	r0, [pc, #76]	@ (80003bc <MX_TIM1_Init+0x98>)
 800036e:	f001 fcf5 	bl	8001d5c <HAL_TIM_Base_Init>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000378:	f000 fa1c 	bl	80007b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800037c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000380:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000382:	f107 0308 	add.w	r3, r7, #8
 8000386:	4619      	mov	r1, r3
 8000388:	480c      	ldr	r0, [pc, #48]	@ (80003bc <MX_TIM1_Init+0x98>)
 800038a:	f001 ffa1 	bl	80022d0 <HAL_TIM_ConfigClockSource>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000394:	f000 fa0e 	bl	80007b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000398:	2300      	movs	r3, #0
 800039a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800039c:	2300      	movs	r3, #0
 800039e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003a0:	463b      	mov	r3, r7
 80003a2:	4619      	mov	r1, r3
 80003a4:	4805      	ldr	r0, [pc, #20]	@ (80003bc <MX_TIM1_Init+0x98>)
 80003a6:	f002 fb0b 	bl	80029c0 <HAL_TIMEx_MasterConfigSynchronization>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80003b0:	f000 fa00 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	3718      	adds	r7, #24
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	200000d8 	.word	0x200000d8
 80003c0:	40012c00 	.word	0x40012c00

080003c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08e      	sub	sp, #56	@ 0x38
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d8:	f107 0320 	add.w	r3, r7, #32
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]
 80003f0:	615a      	str	r2, [r3, #20]
 80003f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80003f4:	4b2c      	ldr	r3, [pc, #176]	@ (80004a8 <MX_TIM4_Init+0xe4>)
 80003f6:	4a2d      	ldr	r2, [pc, #180]	@ (80004ac <MX_TIM4_Init+0xe8>)
 80003f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 80003fa:	4b2b      	ldr	r3, [pc, #172]	@ (80004a8 <MX_TIM4_Init+0xe4>)
 80003fc:	223f      	movs	r2, #63	@ 0x3f
 80003fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000400:	4b29      	ldr	r3, [pc, #164]	@ (80004a8 <MX_TIM4_Init+0xe4>)
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1-1;
 8000406:	4b28      	ldr	r3, [pc, #160]	@ (80004a8 <MX_TIM4_Init+0xe4>)
 8000408:	2200      	movs	r2, #0
 800040a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800040c:	4b26      	ldr	r3, [pc, #152]	@ (80004a8 <MX_TIM4_Init+0xe4>)
 800040e:	2200      	movs	r2, #0
 8000410:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000412:	4b25      	ldr	r3, [pc, #148]	@ (80004a8 <MX_TIM4_Init+0xe4>)
 8000414:	2200      	movs	r2, #0
 8000416:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000418:	4823      	ldr	r0, [pc, #140]	@ (80004a8 <MX_TIM4_Init+0xe4>)
 800041a:	f001 fc9f 	bl	8001d5c <HAL_TIM_Base_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000424:	f000 f9c6 	bl	80007b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000428:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800042c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800042e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000432:	4619      	mov	r1, r3
 8000434:	481c      	ldr	r0, [pc, #112]	@ (80004a8 <MX_TIM4_Init+0xe4>)
 8000436:	f001 ff4b 	bl	80022d0 <HAL_TIM_ConfigClockSource>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000440:	f000 f9b8 	bl	80007b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000444:	4818      	ldr	r0, [pc, #96]	@ (80004a8 <MX_TIM4_Init+0xe4>)
 8000446:	f001 fd23 	bl	8001e90 <HAL_TIM_PWM_Init>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000450:	f000 f9b0 	bl	80007b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000454:	2300      	movs	r3, #0
 8000456:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000458:	2300      	movs	r3, #0
 800045a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800045c:	f107 0320 	add.w	r3, r7, #32
 8000460:	4619      	mov	r1, r3
 8000462:	4811      	ldr	r0, [pc, #68]	@ (80004a8 <MX_TIM4_Init+0xe4>)
 8000464:	f002 faac 	bl	80029c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800046e:	f000 f9a1 	bl	80007b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000472:	2360      	movs	r3, #96	@ 0x60
 8000474:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2200      	movs	r2, #0
 8000486:	4619      	mov	r1, r3
 8000488:	4807      	ldr	r0, [pc, #28]	@ (80004a8 <MX_TIM4_Init+0xe4>)
 800048a:	f001 fe5f 	bl	800214c <HAL_TIM_PWM_ConfigChannel>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000494:	f000 f98e 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000498:	4803      	ldr	r0, [pc, #12]	@ (80004a8 <MX_TIM4_Init+0xe4>)
 800049a:	f000 fa45 	bl	8000928 <HAL_TIM_MspPostInit>

}
 800049e:	bf00      	nop
 80004a0:	3738      	adds	r7, #56	@ 0x38
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000120 	.word	0x20000120
 80004ac:	40000800 	.word	0x40000800

080004b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004b4:	4b11      	ldr	r3, [pc, #68]	@ (80004fc <MX_USART2_UART_Init+0x4c>)
 80004b6:	4a12      	ldr	r2, [pc, #72]	@ (8000500 <MX_USART2_UART_Init+0x50>)
 80004b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004ba:	4b10      	ldr	r3, [pc, #64]	@ (80004fc <MX_USART2_UART_Init+0x4c>)
 80004bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004c2:	4b0e      	ldr	r3, [pc, #56]	@ (80004fc <MX_USART2_UART_Init+0x4c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	@ (80004fc <MX_USART2_UART_Init+0x4c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ce:	4b0b      	ldr	r3, [pc, #44]	@ (80004fc <MX_USART2_UART_Init+0x4c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004d4:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <MX_USART2_UART_Init+0x4c>)
 80004d6:	220c      	movs	r2, #12
 80004d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004da:	4b08      	ldr	r3, [pc, #32]	@ (80004fc <MX_USART2_UART_Init+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e0:	4b06      	ldr	r3, [pc, #24]	@ (80004fc <MX_USART2_UART_Init+0x4c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004e6:	4805      	ldr	r0, [pc, #20]	@ (80004fc <MX_USART2_UART_Init+0x4c>)
 80004e8:	f002 fac8 	bl	8002a7c <HAL_UART_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004f2:	f000 f95f 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000168 	.word	0x20000168
 8000500:	40004400 	.word	0x40004400

08000504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000518:	4b29      	ldr	r3, [pc, #164]	@ (80005c0 <MX_GPIO_Init+0xbc>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a28      	ldr	r2, [pc, #160]	@ (80005c0 <MX_GPIO_Init+0xbc>)
 800051e:	f043 0310 	orr.w	r3, r3, #16
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b26      	ldr	r3, [pc, #152]	@ (80005c0 <MX_GPIO_Init+0xbc>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0310 	and.w	r3, r3, #16
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000530:	4b23      	ldr	r3, [pc, #140]	@ (80005c0 <MX_GPIO_Init+0xbc>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a22      	ldr	r2, [pc, #136]	@ (80005c0 <MX_GPIO_Init+0xbc>)
 8000536:	f043 0320 	orr.w	r3, r3, #32
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b20      	ldr	r3, [pc, #128]	@ (80005c0 <MX_GPIO_Init+0xbc>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0320 	and.w	r3, r3, #32
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4b1d      	ldr	r3, [pc, #116]	@ (80005c0 <MX_GPIO_Init+0xbc>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a1c      	ldr	r2, [pc, #112]	@ (80005c0 <MX_GPIO_Init+0xbc>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b1a      	ldr	r3, [pc, #104]	@ (80005c0 <MX_GPIO_Init+0xbc>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0304 	and.w	r3, r3, #4
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000560:	4b17      	ldr	r3, [pc, #92]	@ (80005c0 <MX_GPIO_Init+0xbc>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a16      	ldr	r2, [pc, #88]	@ (80005c0 <MX_GPIO_Init+0xbc>)
 8000566:	f043 0308 	orr.w	r3, r3, #8
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b14      	ldr	r3, [pc, #80]	@ (80005c0 <MX_GPIO_Init+0xbc>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0308 	and.w	r3, r3, #8
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2120      	movs	r1, #32
 800057c:	4811      	ldr	r0, [pc, #68]	@ (80005c4 <MX_GPIO_Init+0xc0>)
 800057e:	f000 fe80 	bl	8001282 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000582:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000586:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	4619      	mov	r1, r3
 8000596:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <MX_GPIO_Init+0xc4>)
 8000598:	f000 fcd8 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800059c:	2320      	movs	r3, #32
 800059e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a0:	2301      	movs	r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a8:	2302      	movs	r3, #2
 80005aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4619      	mov	r1, r3
 80005b2:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <MX_GPIO_Init+0xc0>)
 80005b4:	f000 fcca 	bl	8000f4c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005b8:	bf00      	nop
 80005ba:	3720      	adds	r7, #32
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40010800 	.word	0x40010800
 80005c8:	40011000 	.word	0x40011000

080005cc <trig>:
	/**
	 * @brief Activate HC-SR04 구동 함수( PW = 10(㎲)인 트리거 펄스 출력 )
	 * @param no param(void)
	 */
	void trig(void)
	{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, HIGH);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2110      	movs	r1, #16
 80005d4:	4806      	ldr	r0, [pc, #24]	@ (80005f0 <trig+0x24>)
 80005d6:	f000 fe54 	bl	8001282 <HAL_GPIO_WritePin>
		delay_us(10);
 80005da:	200a      	movs	r0, #10
 80005dc:	f000 faf0 	bl	8000bc0 <delay_us>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, LOW);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2110      	movs	r1, #16
 80005e4:	4802      	ldr	r0, [pc, #8]	@ (80005f0 <trig+0x24>)
 80005e6:	f000 fe4c 	bl	8001282 <HAL_GPIO_WritePin>
	}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40010c00 	.word	0x40010c00

080005f4 <echo>:
	/**
	 * @brief echo 신호가 HIGH를 유지하는 시간을 (㎲)단위로 측정하여 리턴한다.
	 * @param no param(void)
	 */
	long unsigned int echo(void)
	{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
		long unsigned int echo = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]

		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == LOW){}
 80005fe:	bf00      	nop
 8000600:	2120      	movs	r1, #32
 8000602:	4812      	ldr	r0, [pc, #72]	@ (800064c <echo+0x58>)
 8000604:	f000 fe26 	bl	8001254 <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d0f8      	beq.n	8000600 <echo+0xc>
			  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800060e:	4b10      	ldr	r3, [pc, #64]	@ (8000650 <echo+0x5c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	625a      	str	r2, [r3, #36]	@ 0x24
			  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == HIGH);
 8000616:	bf00      	nop
 8000618:	2120      	movs	r1, #32
 800061a:	480c      	ldr	r0, [pc, #48]	@ (800064c <echo+0x58>)
 800061c:	f000 fe1a 	bl	8001254 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b01      	cmp	r3, #1
 8000624:	d0f8      	beq.n	8000618 <echo+0x24>
			  echo = __HAL_TIM_GET_COUNTER(&htim1);
 8000626:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <echo+0x5c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800062c:	607b      	str	r3, [r7, #4]
		if( echo >= 240 && echo <= 23000 ) return echo;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2bef      	cmp	r3, #239	@ 0xef
 8000632:	d906      	bls.n	8000642 <echo+0x4e>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f645 12d8 	movw	r2, #23000	@ 0x59d8
 800063a:	4293      	cmp	r3, r2
 800063c:	d801      	bhi.n	8000642 <echo+0x4e>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	e000      	b.n	8000644 <echo+0x50>
		else return 0;
 8000642:	2300      	movs	r3, #0
	}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40010c00 	.word	0x40010c00
 8000650:	200000d8 	.word	0x200000d8

08000654 <get_dist_10times>:

	/**
		 * @brief HC-SR04 거리 측정값 10개를 dist[]에 저장하는 함수.
		 * @param no param(void)
		 */
	void get_dist_10times(void){
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
		trig();
 800065a:	f7ff ffb7 	bl	80005cc <trig>
		echo_time = echo();
 800065e:	f7ff ffc9 	bl	80005f4 <echo>
 8000662:	4603      	mov	r3, r0
 8000664:	4a13      	ldr	r2, [pc, #76]	@ (80006b4 <get_dist_10times+0x60>)
 8000666:	6013      	str	r3, [r2, #0]
		if(echo_time != 0){
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <get_dist_10times+0x60>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d01a      	beq.n	80006a6 <get_dist_10times+0x52>
			out_of_range = FALSE;
 8000670:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <get_dist_10times+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i<10; i++)
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	e010      	b.n	800069e <get_dist_10times+0x4a>
			{
				dist[i] = (int)(17 * echo_time / 100);
 800067c:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <get_dist_10times+0x60>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4613      	mov	r3, r2
 8000682:	011b      	lsls	r3, r3, #4
 8000684:	4413      	add	r3, r2
 8000686:	4a0d      	ldr	r2, [pc, #52]	@ (80006bc <get_dist_10times+0x68>)
 8000688:	fba2 2303 	umull	r2, r3, r2, r3
 800068c:	095b      	lsrs	r3, r3, #5
 800068e:	b299      	uxth	r1, r3
 8000690:	4a0b      	ldr	r2, [pc, #44]	@ (80006c0 <get_dist_10times+0x6c>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i<10; i++)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3301      	adds	r3, #1
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b09      	cmp	r3, #9
 80006a2:	ddeb      	ble.n	800067c <get_dist_10times+0x28>
			}
		}
		else out_of_range = TRUE;
	}
 80006a4:	e002      	b.n	80006ac <get_dist_10times+0x58>
		else out_of_range = TRUE;
 80006a6:	4b04      	ldr	r3, [pc, #16]	@ (80006b8 <get_dist_10times+0x64>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
	}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200001b0 	.word	0x200001b0
 80006b8:	200001c8 	.word	0x200001c8
 80006bc:	51eb851f 	.word	0x51eb851f
 80006c0:	200001b4 	.word	0x200001b4

080006c4 <sort_array_dist>:

	void sort_array_dist(void) {
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
		 for (int i = 0; i < 9; i++) {
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	e02e      	b.n	800072e <sort_array_dist+0x6a>
			 for (int j = 0; j < 9 - i; j++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	e022      	b.n	800071c <sort_array_dist+0x58>
				 if (dist[j] > dist[j + 1]) {
 80006d6:	4a1a      	ldr	r2, [pc, #104]	@ (8000740 <sort_array_dist+0x7c>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	3301      	adds	r3, #1
 80006e2:	4917      	ldr	r1, [pc, #92]	@ (8000740 <sort_array_dist+0x7c>)
 80006e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d914      	bls.n	8000716 <sort_array_dist+0x52>
					 int temp = dist[j];
 80006ec:	4a14      	ldr	r2, [pc, #80]	@ (8000740 <sort_array_dist+0x7c>)
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f4:	607b      	str	r3, [r7, #4]
					 dist[j] = dist[j + 1];
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	3301      	adds	r3, #1
 80006fa:	4a11      	ldr	r2, [pc, #68]	@ (8000740 <sort_array_dist+0x7c>)
 80006fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000700:	4a0f      	ldr	r2, [pc, #60]	@ (8000740 <sort_array_dist+0x7c>)
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					 dist[j + 1] = temp;
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	3301      	adds	r3, #1
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	b291      	uxth	r1, r2
 8000710:	4a0b      	ldr	r2, [pc, #44]	@ (8000740 <sort_array_dist+0x7c>)
 8000712:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 for (int j = 0; j < 9 - i; j++) {
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	3301      	adds	r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f1c3 0309 	rsb	r3, r3, #9
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	429a      	cmp	r2, r3
 8000726:	dbd6      	blt.n	80006d6 <sort_array_dist+0x12>
		 for (int i = 0; i < 9; i++) {
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3301      	adds	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2b08      	cmp	r3, #8
 8000732:	ddcd      	ble.n	80006d0 <sort_array_dist+0xc>
		            }
			 }
		 }
	}
 8000734:	bf00      	nop
 8000736:	bf00      	nop
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	200001b4 	.word	0x200001b4

08000744 <alarm>:

		void alarm(int freq, int on, int off)
	{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
	  	__HAL_TIM_SET_AUTORELOAD(&htim4, (int)(TIM4COUNTERCLOCK / freq));
 8000750:	4a16      	ldr	r2, [pc, #88]	@ (80007ac <alarm+0x68>)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	fb92 f2f3 	sdiv	r2, r2, r3
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <alarm+0x6c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800075e:	4a13      	ldr	r2, [pc, #76]	@ (80007ac <alarm+0x68>)
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	fb92 f3f3 	sdiv	r3, r2, r3
 8000766:	461a      	mov	r2, r3
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <alarm+0x6c>)
 800076a:	60da      	str	r2, [r3, #12]
	  	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, TIM4COUNTERCLOCK / freq / 2);
 800076c:	4a0f      	ldr	r2, [pc, #60]	@ (80007ac <alarm+0x68>)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	fb92 f3f3 	sdiv	r3, r2, r3
 8000774:	0fda      	lsrs	r2, r3, #31
 8000776:	4413      	add	r3, r2
 8000778:	105b      	asrs	r3, r3, #1
 800077a:	461a      	mov	r2, r3
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <alarm+0x6c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	635a      	str	r2, [r3, #52]	@ 0x34
	    HAL_TIM_PWM_Start (&htim4, TIM_CHANNEL_1);
 8000782:	2100      	movs	r1, #0
 8000784:	480a      	ldr	r0, [pc, #40]	@ (80007b0 <alarm+0x6c>)
 8000786:	f001 fbdb 	bl	8001f40 <HAL_TIM_PWM_Start>
	    HAL_Delay (on);
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fad5 	bl	8000d3c <HAL_Delay>
	    HAL_TIM_PWM_Stop (&htim4, TIM_CHANNEL_1);
 8000792:	2100      	movs	r1, #0
 8000794:	4806      	ldr	r0, [pc, #24]	@ (80007b0 <alarm+0x6c>)
 8000796:	f001 fc75 	bl	8002084 <HAL_TIM_PWM_Stop>
	    HAL_Delay (off);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4618      	mov	r0, r3
 800079e:	f000 facd 	bl	8000d3c <HAL_Delay>
	}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	000f4240 	.word	0x000f4240
 80007b0:	20000120 	.word	0x20000120

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <Error_Handler+0x8>

080007c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007c6:	4b15      	ldr	r3, [pc, #84]	@ (800081c <HAL_MspInit+0x5c>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a14      	ldr	r2, [pc, #80]	@ (800081c <HAL_MspInit+0x5c>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6193      	str	r3, [r2, #24]
 80007d2:	4b12      	ldr	r3, [pc, #72]	@ (800081c <HAL_MspInit+0x5c>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <HAL_MspInit+0x5c>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a0e      	ldr	r2, [pc, #56]	@ (800081c <HAL_MspInit+0x5c>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <HAL_MspInit+0x5c>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <HAL_MspInit+0x60>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	4a04      	ldr	r2, [pc, #16]	@ (8000820 <HAL_MspInit+0x60>)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	40021000 	.word	0x40021000
 8000820:	40010000 	.word	0x40010000

08000824 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	@ 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a1d      	ldr	r2, [pc, #116]	@ (80008b4 <HAL_I2C_MspInit+0x90>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d132      	bne.n	80008aa <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000844:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <HAL_I2C_MspInit+0x94>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a1b      	ldr	r2, [pc, #108]	@ (80008b8 <HAL_I2C_MspInit+0x94>)
 800084a:	f043 0308 	orr.w	r3, r3, #8
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <HAL_I2C_MspInit+0x94>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0308 	and.w	r3, r3, #8
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800085c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000862:	2312      	movs	r3, #18
 8000864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000866:	2303      	movs	r3, #3
 8000868:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	4812      	ldr	r0, [pc, #72]	@ (80008bc <HAL_I2C_MspInit+0x98>)
 8000872:	f000 fb6b 	bl	8000f4c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000876:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <HAL_I2C_MspInit+0x9c>)
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
 800087c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800087e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
 8000884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000886:	f043 0302 	orr.w	r3, r3, #2
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
 800088c:	4a0c      	ldr	r2, [pc, #48]	@ (80008c0 <HAL_I2C_MspInit+0x9c>)
 800088e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000890:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <HAL_I2C_MspInit+0x94>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	4a08      	ldr	r2, [pc, #32]	@ (80008b8 <HAL_I2C_MspInit+0x94>)
 8000898:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800089c:	61d3      	str	r3, [r2, #28]
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <HAL_I2C_MspInit+0x94>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80008aa:	bf00      	nop
 80008ac:	3728      	adds	r7, #40	@ 0x28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40005400 	.word	0x40005400
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40010c00 	.word	0x40010c00
 80008c0:	40010000 	.word	0x40010000

080008c4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a12      	ldr	r2, [pc, #72]	@ (800091c <HAL_TIM_Base_MspInit+0x58>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d10c      	bne.n	80008f0 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <HAL_TIM_Base_MspInit+0x5c>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	4a11      	ldr	r2, [pc, #68]	@ (8000920 <HAL_TIM_Base_MspInit+0x5c>)
 80008dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008e0:	6193      	str	r3, [r2, #24]
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <HAL_TIM_Base_MspInit+0x5c>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80008ee:	e010      	b.n	8000912 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000924 <HAL_TIM_Base_MspInit+0x60>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d10b      	bne.n	8000912 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <HAL_TIM_Base_MspInit+0x5c>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	4a08      	ldr	r2, [pc, #32]	@ (8000920 <HAL_TIM_Base_MspInit+0x5c>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	61d3      	str	r3, [r2, #28]
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <HAL_TIM_Base_MspInit+0x5c>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	40012c00 	.word	0x40012c00
 8000920:	40021000 	.word	0x40021000
 8000924:	40000800 	.word	0x40000800

08000928 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a0f      	ldr	r2, [pc, #60]	@ (8000980 <HAL_TIM_MspPostInit+0x58>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d117      	bne.n	8000978 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000948:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <HAL_TIM_MspPostInit+0x5c>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a0d      	ldr	r2, [pc, #52]	@ (8000984 <HAL_TIM_MspPostInit+0x5c>)
 800094e:	f043 0308 	orr.w	r3, r3, #8
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b0b      	ldr	r3, [pc, #44]	@ (8000984 <HAL_TIM_MspPostInit+0x5c>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0308 	and.w	r3, r3, #8
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000960:	2340      	movs	r3, #64	@ 0x40
 8000962:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2302      	movs	r3, #2
 800096a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4619      	mov	r1, r3
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <HAL_TIM_MspPostInit+0x60>)
 8000974:	f000 faea 	bl	8000f4c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000978:	bf00      	nop
 800097a:	3720      	adds	r7, #32
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40000800 	.word	0x40000800
 8000984:	40021000 	.word	0x40021000
 8000988:	40010c00 	.word	0x40010c00

0800098c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a15      	ldr	r2, [pc, #84]	@ (80009fc <HAL_UART_MspInit+0x70>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d123      	bne.n	80009f4 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ac:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <HAL_UART_MspInit+0x74>)
 80009ae:	69db      	ldr	r3, [r3, #28]
 80009b0:	4a13      	ldr	r2, [pc, #76]	@ (8000a00 <HAL_UART_MspInit+0x74>)
 80009b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b6:	61d3      	str	r3, [r2, #28]
 80009b8:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <HAL_UART_MspInit+0x74>)
 80009ba:	69db      	ldr	r3, [r3, #28]
 80009bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <HAL_UART_MspInit+0x74>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a00 <HAL_UART_MspInit+0x74>)
 80009ca:	f043 0304 	orr.w	r3, r3, #4
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a00 <HAL_UART_MspInit+0x74>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009dc:	230c      	movs	r3, #12
 80009de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	4619      	mov	r1, r3
 80009ee:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <HAL_UART_MspInit+0x78>)
 80009f0:	f000 faac 	bl	8000f4c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009f4:	bf00      	nop
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40004400 	.word	0x40004400
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40010800 	.word	0x40010800

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <NMI_Handler+0x4>

08000a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <MemManage_Handler+0x4>

08000a20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f954 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e00a      	b.n	8000a88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a72:	f3af 8000 	nop.w
 8000a76:	4601      	mov	r1, r0
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	60ba      	str	r2, [r7, #8]
 8000a7e:	b2ca      	uxtb	r2, r1
 8000a80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dbf0      	blt.n	8000a72 <_read+0x12>
  }

  return len;
 8000a90:	687b      	ldr	r3, [r7, #4]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	e009      	b.n	8000ac0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	60ba      	str	r2, [r7, #8]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 f89b 	bl	8000bf0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	dbf1      	blt.n	8000aac <_write+0x12>
  }
  return len;
 8000ac8:	687b      	ldr	r3, [r7, #4]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_close>:

int _close(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000af8:	605a      	str	r2, [r3, #4]
  return 0;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr

08000b06 <_isatty>:

int _isatty(int file)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b085      	sub	sp, #20
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
	...

08000b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b3c:	4a14      	ldr	r2, [pc, #80]	@ (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b48:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d207      	bcs.n	8000b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b64:	f002 fc06 	bl	8003374 <__errno>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b72:	e009      	b.n	8000b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <_sbrk+0x64>)
 8000b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20005000 	.word	0x20005000
 8000b94:	00000400 	.word	0x00000400
 8000b98:	200001d0 	.word	0x200001d0
 8000b9c:	20000328 	.word	0x20000328

08000ba0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <timer_start>:
 */

#include "tim1delay_us.h"

void timer_start(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);
 8000bb0:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <timer_start+0x10>)
 8000bb2:	f001 f923 	bl	8001dfc <HAL_TIM_Base_Start>
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200000d8 	.word	0x200000d8

08000bc0 <delay_us>:

void delay_us(uint16_t us)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);              // initislize counter to start from 0
 8000bca:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <delay_us+0x2c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	@ 0x24
	while((__HAL_TIM_GET_COUNTER(&htim1))<us);   // wait count until us
 8000bd2:	bf00      	nop
 8000bd4:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <delay_us+0x2c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d3f9      	bcc.n	8000bd4 <delay_us+0x14>
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	200000d8 	.word	0x200000d8

08000bf0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  if (ch == '\n')
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b0a      	cmp	r3, #10
 8000bfc:	d106      	bne.n	8000c0c <__io_putchar+0x1c>
    HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 8000bfe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c02:	2201      	movs	r2, #1
 8000c04:	4907      	ldr	r1, [pc, #28]	@ (8000c24 <__io_putchar+0x34>)
 8000c06:	4808      	ldr	r0, [pc, #32]	@ (8000c28 <__io_putchar+0x38>)
 8000c08:	f001 ff88 	bl	8002b1c <HAL_UART_Transmit>
  HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000c0c:	1d39      	adds	r1, r7, #4
 8000c0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c12:	2201      	movs	r2, #1
 8000c14:	4804      	ldr	r0, [pc, #16]	@ (8000c28 <__io_putchar+0x38>)
 8000c16:	f001 ff81 	bl	8002b1c <HAL_UART_Transmit>

  return ch;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	08003e44 	.word	0x08003e44
 8000c28:	20000168 	.word	0x20000168

08000c2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c2c:	f7ff ffb8 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c30:	480b      	ldr	r0, [pc, #44]	@ (8000c60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c32:	490c      	ldr	r1, [pc, #48]	@ (8000c64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c34:	4a0c      	ldr	r2, [pc, #48]	@ (8000c68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a09      	ldr	r2, [pc, #36]	@ (8000c6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c48:	4c09      	ldr	r4, [pc, #36]	@ (8000c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c56:	f002 fb93 	bl	8003380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c5a:	f7ff fa77 	bl	800014c <main>
  bx lr
 8000c5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c68:	08003eb0 	.word	0x08003eb0
  ldr r2, =_sbss
 8000c6c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c70:	20000324 	.word	0x20000324

08000c74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC1_2_IRQHandler>
	...

08000c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <HAL_Init+0x28>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a07      	ldr	r2, [pc, #28]	@ (8000ca0 <HAL_Init+0x28>)
 8000c82:	f043 0310 	orr.w	r3, r3, #16
 8000c86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 f92b 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 f808 	bl	8000ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c94:	f7ff fd94 	bl	80007c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40022000 	.word	0x40022000

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cac:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <HAL_InitTick+0x54>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <HAL_InitTick+0x58>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f935 	bl	8000f32 <HAL_SYSTICK_Config>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00e      	b.n	8000cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d80a      	bhi.n	8000cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f000 f90b 	bl	8000efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce4:	4a06      	ldr	r2, [pc, #24]	@ (8000d00 <HAL_InitTick+0x5c>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000004 	.word	0x20000004

08000d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <HAL_IncTick+0x1c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <HAL_IncTick+0x20>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a03      	ldr	r2, [pc, #12]	@ (8000d24 <HAL_IncTick+0x20>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	20000008 	.word	0x20000008
 8000d24:	200001d4 	.word	0x200001d4

08000d28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b02      	ldr	r3, [pc, #8]	@ (8000d38 <HAL_GetTick+0x10>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	200001d4 	.word	0x200001d4

08000d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d44:	f7ff fff0 	bl	8000d28 <HAL_GetTick>
 8000d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d54:	d005      	beq.n	8000d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d56:	4b0a      	ldr	r3, [pc, #40]	@ (8000d80 <HAL_Delay+0x44>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4413      	add	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d62:	bf00      	nop
 8000d64:	f7ff ffe0 	bl	8000d28 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d8f7      	bhi.n	8000d64 <HAL_Delay+0x28>
  {
  }
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008

08000d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	@ (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	@ (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	@ (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	@ 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	@ 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000eb0:	d301      	bcc.n	8000eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00f      	b.n	8000ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <SysTick_Config+0x40>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f7ff ff90 	bl	8000de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec8:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <SysTick_Config+0x40>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	4b04      	ldr	r3, [pc, #16]	@ (8000ee0 <SysTick_Config+0x40>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff49 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0c:	f7ff ff5e 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	6978      	ldr	r0, [r7, #20]
 8000f18:	f7ff ff90 	bl	8000e3c <NVIC_EncodePriority>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff5f 	bl	8000de8 <__NVIC_SetPriority>
}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffb0 	bl	8000ea0 <SysTick_Config>
 8000f40:	4603      	mov	r3, r0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b08b      	sub	sp, #44	@ 0x2c
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5e:	e169      	b.n	8001234 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f60:	2201      	movs	r2, #1
 8000f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	69fa      	ldr	r2, [r7, #28]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	f040 8158 	bne.w	800122e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	4a9a      	ldr	r2, [pc, #616]	@ (80011ec <HAL_GPIO_Init+0x2a0>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d05e      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000f88:	4a98      	ldr	r2, [pc, #608]	@ (80011ec <HAL_GPIO_Init+0x2a0>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d875      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000f8e:	4a98      	ldr	r2, [pc, #608]	@ (80011f0 <HAL_GPIO_Init+0x2a4>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d058      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000f94:	4a96      	ldr	r2, [pc, #600]	@ (80011f0 <HAL_GPIO_Init+0x2a4>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d86f      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000f9a:	4a96      	ldr	r2, [pc, #600]	@ (80011f4 <HAL_GPIO_Init+0x2a8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d052      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000fa0:	4a94      	ldr	r2, [pc, #592]	@ (80011f4 <HAL_GPIO_Init+0x2a8>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d869      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000fa6:	4a94      	ldr	r2, [pc, #592]	@ (80011f8 <HAL_GPIO_Init+0x2ac>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d04c      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000fac:	4a92      	ldr	r2, [pc, #584]	@ (80011f8 <HAL_GPIO_Init+0x2ac>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d863      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000fb2:	4a92      	ldr	r2, [pc, #584]	@ (80011fc <HAL_GPIO_Init+0x2b0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d046      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000fb8:	4a90      	ldr	r2, [pc, #576]	@ (80011fc <HAL_GPIO_Init+0x2b0>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d85d      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000fbe:	2b12      	cmp	r3, #18
 8000fc0:	d82a      	bhi.n	8001018 <HAL_GPIO_Init+0xcc>
 8000fc2:	2b12      	cmp	r3, #18
 8000fc4:	d859      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8000fcc <HAL_GPIO_Init+0x80>)
 8000fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fcc:	08001047 	.word	0x08001047
 8000fd0:	08001021 	.word	0x08001021
 8000fd4:	08001033 	.word	0x08001033
 8000fd8:	08001075 	.word	0x08001075
 8000fdc:	0800107b 	.word	0x0800107b
 8000fe0:	0800107b 	.word	0x0800107b
 8000fe4:	0800107b 	.word	0x0800107b
 8000fe8:	0800107b 	.word	0x0800107b
 8000fec:	0800107b 	.word	0x0800107b
 8000ff0:	0800107b 	.word	0x0800107b
 8000ff4:	0800107b 	.word	0x0800107b
 8000ff8:	0800107b 	.word	0x0800107b
 8000ffc:	0800107b 	.word	0x0800107b
 8001000:	0800107b 	.word	0x0800107b
 8001004:	0800107b 	.word	0x0800107b
 8001008:	0800107b 	.word	0x0800107b
 800100c:	0800107b 	.word	0x0800107b
 8001010:	08001029 	.word	0x08001029
 8001014:	0800103d 	.word	0x0800103d
 8001018:	4a79      	ldr	r2, [pc, #484]	@ (8001200 <HAL_GPIO_Init+0x2b4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800101e:	e02c      	b.n	800107a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	623b      	str	r3, [r7, #32]
          break;
 8001026:	e029      	b.n	800107c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	3304      	adds	r3, #4
 800102e:	623b      	str	r3, [r7, #32]
          break;
 8001030:	e024      	b.n	800107c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	3308      	adds	r3, #8
 8001038:	623b      	str	r3, [r7, #32]
          break;
 800103a:	e01f      	b.n	800107c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	330c      	adds	r3, #12
 8001042:	623b      	str	r3, [r7, #32]
          break;
 8001044:	e01a      	b.n	800107c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d102      	bne.n	8001054 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800104e:	2304      	movs	r3, #4
 8001050:	623b      	str	r3, [r7, #32]
          break;
 8001052:	e013      	b.n	800107c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d105      	bne.n	8001068 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800105c:	2308      	movs	r3, #8
 800105e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69fa      	ldr	r2, [r7, #28]
 8001064:	611a      	str	r2, [r3, #16]
          break;
 8001066:	e009      	b.n	800107c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001068:	2308      	movs	r3, #8
 800106a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69fa      	ldr	r2, [r7, #28]
 8001070:	615a      	str	r2, [r3, #20]
          break;
 8001072:	e003      	b.n	800107c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
          break;
 8001078:	e000      	b.n	800107c <HAL_GPIO_Init+0x130>
          break;
 800107a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2bff      	cmp	r3, #255	@ 0xff
 8001080:	d801      	bhi.n	8001086 <HAL_GPIO_Init+0x13a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	e001      	b.n	800108a <HAL_GPIO_Init+0x13e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3304      	adds	r3, #4
 800108a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	2bff      	cmp	r3, #255	@ 0xff
 8001090:	d802      	bhi.n	8001098 <HAL_GPIO_Init+0x14c>
 8001092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	e002      	b.n	800109e <HAL_GPIO_Init+0x152>
 8001098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109a:	3b08      	subs	r3, #8
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	210f      	movs	r1, #15
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	401a      	ands	r2, r3
 80010b0:	6a39      	ldr	r1, [r7, #32]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	431a      	orrs	r2, r3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 80b1 	beq.w	800122e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001204 <HAL_GPIO_Init+0x2b8>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001204 <HAL_GPIO_Init+0x2b8>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001204 <HAL_GPIO_Init+0x2b8>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010e4:	4a48      	ldr	r2, [pc, #288]	@ (8001208 <HAL_GPIO_Init+0x2bc>)
 80010e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3302      	adds	r3, #2
 80010ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	220f      	movs	r2, #15
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	4013      	ands	r3, r2
 8001106:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a40      	ldr	r2, [pc, #256]	@ (800120c <HAL_GPIO_Init+0x2c0>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d013      	beq.n	8001138 <HAL_GPIO_Init+0x1ec>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a3f      	ldr	r2, [pc, #252]	@ (8001210 <HAL_GPIO_Init+0x2c4>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d00d      	beq.n	8001134 <HAL_GPIO_Init+0x1e8>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a3e      	ldr	r2, [pc, #248]	@ (8001214 <HAL_GPIO_Init+0x2c8>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d007      	beq.n	8001130 <HAL_GPIO_Init+0x1e4>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a3d      	ldr	r2, [pc, #244]	@ (8001218 <HAL_GPIO_Init+0x2cc>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d101      	bne.n	800112c <HAL_GPIO_Init+0x1e0>
 8001128:	2303      	movs	r3, #3
 800112a:	e006      	b.n	800113a <HAL_GPIO_Init+0x1ee>
 800112c:	2304      	movs	r3, #4
 800112e:	e004      	b.n	800113a <HAL_GPIO_Init+0x1ee>
 8001130:	2302      	movs	r3, #2
 8001132:	e002      	b.n	800113a <HAL_GPIO_Init+0x1ee>
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <HAL_GPIO_Init+0x1ee>
 8001138:	2300      	movs	r3, #0
 800113a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800113c:	f002 0203 	and.w	r2, r2, #3
 8001140:	0092      	lsls	r2, r2, #2
 8001142:	4093      	lsls	r3, r2
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	4313      	orrs	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800114a:	492f      	ldr	r1, [pc, #188]	@ (8001208 <HAL_GPIO_Init+0x2bc>)
 800114c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	3302      	adds	r3, #2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d006      	beq.n	8001172 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001164:	4b2d      	ldr	r3, [pc, #180]	@ (800121c <HAL_GPIO_Init+0x2d0>)
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	492c      	ldr	r1, [pc, #176]	@ (800121c <HAL_GPIO_Init+0x2d0>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	608b      	str	r3, [r1, #8]
 8001170:	e006      	b.n	8001180 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001172:	4b2a      	ldr	r3, [pc, #168]	@ (800121c <HAL_GPIO_Init+0x2d0>)
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	43db      	mvns	r3, r3
 800117a:	4928      	ldr	r1, [pc, #160]	@ (800121c <HAL_GPIO_Init+0x2d0>)
 800117c:	4013      	ands	r3, r2
 800117e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d006      	beq.n	800119a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800118c:	4b23      	ldr	r3, [pc, #140]	@ (800121c <HAL_GPIO_Init+0x2d0>)
 800118e:	68da      	ldr	r2, [r3, #12]
 8001190:	4922      	ldr	r1, [pc, #136]	@ (800121c <HAL_GPIO_Init+0x2d0>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	60cb      	str	r3, [r1, #12]
 8001198:	e006      	b.n	80011a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800119a:	4b20      	ldr	r3, [pc, #128]	@ (800121c <HAL_GPIO_Init+0x2d0>)
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	491e      	ldr	r1, [pc, #120]	@ (800121c <HAL_GPIO_Init+0x2d0>)
 80011a4:	4013      	ands	r3, r2
 80011a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d006      	beq.n	80011c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011b4:	4b19      	ldr	r3, [pc, #100]	@ (800121c <HAL_GPIO_Init+0x2d0>)
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	4918      	ldr	r1, [pc, #96]	@ (800121c <HAL_GPIO_Init+0x2d0>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	604b      	str	r3, [r1, #4]
 80011c0:	e006      	b.n	80011d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011c2:	4b16      	ldr	r3, [pc, #88]	@ (800121c <HAL_GPIO_Init+0x2d0>)
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	4914      	ldr	r1, [pc, #80]	@ (800121c <HAL_GPIO_Init+0x2d0>)
 80011cc:	4013      	ands	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d021      	beq.n	8001220 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <HAL_GPIO_Init+0x2d0>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	490e      	ldr	r1, [pc, #56]	@ (800121c <HAL_GPIO_Init+0x2d0>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	600b      	str	r3, [r1, #0]
 80011e8:	e021      	b.n	800122e <HAL_GPIO_Init+0x2e2>
 80011ea:	bf00      	nop
 80011ec:	10320000 	.word	0x10320000
 80011f0:	10310000 	.word	0x10310000
 80011f4:	10220000 	.word	0x10220000
 80011f8:	10210000 	.word	0x10210000
 80011fc:	10120000 	.word	0x10120000
 8001200:	10110000 	.word	0x10110000
 8001204:	40021000 	.word	0x40021000
 8001208:	40010000 	.word	0x40010000
 800120c:	40010800 	.word	0x40010800
 8001210:	40010c00 	.word	0x40010c00
 8001214:	40011000 	.word	0x40011000
 8001218:	40011400 	.word	0x40011400
 800121c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001220:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <HAL_GPIO_Init+0x304>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	43db      	mvns	r3, r3
 8001228:	4909      	ldr	r1, [pc, #36]	@ (8001250 <HAL_GPIO_Init+0x304>)
 800122a:	4013      	ands	r3, r2
 800122c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001230:	3301      	adds	r3, #1
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123a:	fa22 f303 	lsr.w	r3, r2, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	f47f ae8e 	bne.w	8000f60 <HAL_GPIO_Init+0x14>
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	372c      	adds	r7, #44	@ 0x2c
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	40010400 	.word	0x40010400

08001254 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	887b      	ldrh	r3, [r7, #2]
 8001266:	4013      	ands	r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d002      	beq.n	8001272 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800126c:	2301      	movs	r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	e001      	b.n	8001276 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	460b      	mov	r3, r1
 800128c:	807b      	strh	r3, [r7, #2]
 800128e:	4613      	mov	r3, r2
 8001290:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001292:	787b      	ldrb	r3, [r7, #1]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001298:	887a      	ldrh	r2, [r7, #2]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800129e:	e003      	b.n	80012a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	041a      	lsls	r2, r3, #16
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	611a      	str	r2, [r3, #16]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
	...

080012b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e12b      	b.n	800151e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d106      	bne.n	80012e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff faa2 	bl	8000824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2224      	movs	r2, #36	@ 0x24
 80012e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0201 	bic.w	r2, r2, #1
 80012f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001306:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001316:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001318:	f000 fcda 	bl	8001cd0 <HAL_RCC_GetPCLK1Freq>
 800131c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	4a81      	ldr	r2, [pc, #516]	@ (8001528 <HAL_I2C_Init+0x274>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d807      	bhi.n	8001338 <HAL_I2C_Init+0x84>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4a80      	ldr	r2, [pc, #512]	@ (800152c <HAL_I2C_Init+0x278>)
 800132c:	4293      	cmp	r3, r2
 800132e:	bf94      	ite	ls
 8001330:	2301      	movls	r3, #1
 8001332:	2300      	movhi	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	e006      	b.n	8001346 <HAL_I2C_Init+0x92>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4a7d      	ldr	r2, [pc, #500]	@ (8001530 <HAL_I2C_Init+0x27c>)
 800133c:	4293      	cmp	r3, r2
 800133e:	bf94      	ite	ls
 8001340:	2301      	movls	r3, #1
 8001342:	2300      	movhi	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e0e7      	b.n	800151e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4a78      	ldr	r2, [pc, #480]	@ (8001534 <HAL_I2C_Init+0x280>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	0c9b      	lsrs	r3, r3, #18
 8001358:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	430a      	orrs	r2, r1
 800136c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4a6a      	ldr	r2, [pc, #424]	@ (8001528 <HAL_I2C_Init+0x274>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d802      	bhi.n	8001388 <HAL_I2C_Init+0xd4>
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	3301      	adds	r3, #1
 8001386:	e009      	b.n	800139c <HAL_I2C_Init+0xe8>
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800138e:	fb02 f303 	mul.w	r3, r2, r3
 8001392:	4a69      	ldr	r2, [pc, #420]	@ (8001538 <HAL_I2C_Init+0x284>)
 8001394:	fba2 2303 	umull	r2, r3, r2, r3
 8001398:	099b      	lsrs	r3, r3, #6
 800139a:	3301      	adds	r3, #1
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	430b      	orrs	r3, r1
 80013a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80013ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	495c      	ldr	r1, [pc, #368]	@ (8001528 <HAL_I2C_Init+0x274>)
 80013b8:	428b      	cmp	r3, r1
 80013ba:	d819      	bhi.n	80013f0 <HAL_I2C_Init+0x13c>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	1e59      	subs	r1, r3, #1
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80013ca:	1c59      	adds	r1, r3, #1
 80013cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80013d0:	400b      	ands	r3, r1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00a      	beq.n	80013ec <HAL_I2C_Init+0x138>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1e59      	subs	r1, r3, #1
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80013e4:	3301      	adds	r3, #1
 80013e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ea:	e051      	b.n	8001490 <HAL_I2C_Init+0x1dc>
 80013ec:	2304      	movs	r3, #4
 80013ee:	e04f      	b.n	8001490 <HAL_I2C_Init+0x1dc>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d111      	bne.n	800141c <HAL_I2C_Init+0x168>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	1e58      	subs	r0, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6859      	ldr	r1, [r3, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	440b      	add	r3, r1
 8001406:	fbb0 f3f3 	udiv	r3, r0, r3
 800140a:	3301      	adds	r3, #1
 800140c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001410:	2b00      	cmp	r3, #0
 8001412:	bf0c      	ite	eq
 8001414:	2301      	moveq	r3, #1
 8001416:	2300      	movne	r3, #0
 8001418:	b2db      	uxtb	r3, r3
 800141a:	e012      	b.n	8001442 <HAL_I2C_Init+0x18e>
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	1e58      	subs	r0, r3, #1
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6859      	ldr	r1, [r3, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	0099      	lsls	r1, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001432:	3301      	adds	r3, #1
 8001434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001438:	2b00      	cmp	r3, #0
 800143a:	bf0c      	ite	eq
 800143c:	2301      	moveq	r3, #1
 800143e:	2300      	movne	r3, #0
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_I2C_Init+0x196>
 8001446:	2301      	movs	r3, #1
 8001448:	e022      	b.n	8001490 <HAL_I2C_Init+0x1dc>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10e      	bne.n	8001470 <HAL_I2C_Init+0x1bc>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1e58      	subs	r0, r3, #1
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6859      	ldr	r1, [r3, #4]
 800145a:	460b      	mov	r3, r1
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	440b      	add	r3, r1
 8001460:	fbb0 f3f3 	udiv	r3, r0, r3
 8001464:	3301      	adds	r3, #1
 8001466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800146a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800146e:	e00f      	b.n	8001490 <HAL_I2C_Init+0x1dc>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	1e58      	subs	r0, r3, #1
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6859      	ldr	r1, [r3, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	0099      	lsls	r1, r3, #2
 8001480:	440b      	add	r3, r1
 8001482:	fbb0 f3f3 	udiv	r3, r0, r3
 8001486:	3301      	adds	r3, #1
 8001488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800148c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	6809      	ldr	r1, [r1, #0]
 8001494:	4313      	orrs	r3, r2
 8001496:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69da      	ldr	r2, [r3, #28]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80014be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6911      	ldr	r1, [r2, #16]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68d2      	ldr	r2, [r2, #12]
 80014ca:	4311      	orrs	r1, r2
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	430b      	orrs	r3, r1
 80014d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695a      	ldr	r2, [r3, #20]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0201 	orr.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2220      	movs	r2, #32
 800150a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	000186a0 	.word	0x000186a0
 800152c:	001e847f 	.word	0x001e847f
 8001530:	003d08ff 	.word	0x003d08ff
 8001534:	431bde83 	.word	0x431bde83
 8001538:	10624dd3 	.word	0x10624dd3

0800153c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e272      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8087 	beq.w	800166a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800155c:	4b92      	ldr	r3, [pc, #584]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b04      	cmp	r3, #4
 8001566:	d00c      	beq.n	8001582 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001568:	4b8f      	ldr	r3, [pc, #572]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	2b08      	cmp	r3, #8
 8001572:	d112      	bne.n	800159a <HAL_RCC_OscConfig+0x5e>
 8001574:	4b8c      	ldr	r3, [pc, #560]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001580:	d10b      	bne.n	800159a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001582:	4b89      	ldr	r3, [pc, #548]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d06c      	beq.n	8001668 <HAL_RCC_OscConfig+0x12c>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d168      	bne.n	8001668 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e24c      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x76>
 80015a4:	4b80      	ldr	r3, [pc, #512]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a7f      	ldr	r2, [pc, #508]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	e02e      	b.n	8001610 <HAL_RCC_OscConfig+0xd4>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x98>
 80015ba:	4b7b      	ldr	r3, [pc, #492]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a7a      	ldr	r2, [pc, #488]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b78      	ldr	r3, [pc, #480]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a77      	ldr	r2, [pc, #476]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e01d      	b.n	8001610 <HAL_RCC_OscConfig+0xd4>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0xbc>
 80015de:	4b72      	ldr	r3, [pc, #456]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a71      	ldr	r2, [pc, #452]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4b6f      	ldr	r3, [pc, #444]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a6e      	ldr	r2, [pc, #440]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e00b      	b.n	8001610 <HAL_RCC_OscConfig+0xd4>
 80015f8:	4b6b      	ldr	r3, [pc, #428]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a6a      	ldr	r2, [pc, #424]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b68      	ldr	r3, [pc, #416]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a67      	ldr	r2, [pc, #412]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800160a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800160e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d013      	beq.n	8001640 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fb86 	bl	8000d28 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff fb82 	bl	8000d28 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	@ 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e200      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	4b5d      	ldr	r3, [pc, #372]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0xe4>
 800163e:	e014      	b.n	800166a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fb72 	bl	8000d28 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff fb6e 	bl	8000d28 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	@ 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e1ec      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165a:	4b53      	ldr	r3, [pc, #332]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x10c>
 8001666:	e000      	b.n	800166a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d063      	beq.n	800173e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001676:	4b4c      	ldr	r3, [pc, #304]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00b      	beq.n	800169a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001682:	4b49      	ldr	r3, [pc, #292]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	2b08      	cmp	r3, #8
 800168c:	d11c      	bne.n	80016c8 <HAL_RCC_OscConfig+0x18c>
 800168e:	4b46      	ldr	r3, [pc, #280]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d116      	bne.n	80016c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169a:	4b43      	ldr	r3, [pc, #268]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <HAL_RCC_OscConfig+0x176>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d001      	beq.n	80016b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e1c0      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b2:	4b3d      	ldr	r3, [pc, #244]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	4939      	ldr	r1, [pc, #228]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c6:	e03a      	b.n	800173e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d020      	beq.n	8001712 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d0:	4b36      	ldr	r3, [pc, #216]	@ (80017ac <HAL_RCC_OscConfig+0x270>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fb27 	bl	8000d28 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016de:	f7ff fb23 	bl	8000d28 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1a1      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f0:	4b2d      	ldr	r3, [pc, #180]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fc:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4927      	ldr	r1, [pc, #156]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800170c:	4313      	orrs	r3, r2
 800170e:	600b      	str	r3, [r1, #0]
 8001710:	e015      	b.n	800173e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001712:	4b26      	ldr	r3, [pc, #152]	@ (80017ac <HAL_RCC_OscConfig+0x270>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fb06 	bl	8000d28 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001720:	f7ff fb02 	bl	8000d28 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e180      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001732:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d03a      	beq.n	80017c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d019      	beq.n	8001786 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001752:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <HAL_RCC_OscConfig+0x274>)
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001758:	f7ff fae6 	bl	8000d28 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001760:	f7ff fae2 	bl	8000d28 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e160      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001772:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800177e:	2001      	movs	r0, #1
 8001780:	f000 face 	bl	8001d20 <RCC_Delay>
 8001784:	e01c      	b.n	80017c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <HAL_RCC_OscConfig+0x274>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178c:	f7ff facc 	bl	8000d28 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001792:	e00f      	b.n	80017b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001794:	f7ff fac8 	bl	8000d28 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d908      	bls.n	80017b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e146      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	42420000 	.word	0x42420000
 80017b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b4:	4b92      	ldr	r3, [pc, #584]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1e9      	bne.n	8001794 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80a6 	beq.w	800191a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10d      	bne.n	80017fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	4b88      	ldr	r3, [pc, #544]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	4a87      	ldr	r2, [pc, #540]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e8:	61d3      	str	r3, [r2, #28]
 80017ea:	4b85      	ldr	r3, [pc, #532]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f6:	2301      	movs	r3, #1
 80017f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fa:	4b82      	ldr	r3, [pc, #520]	@ (8001a04 <HAL_RCC_OscConfig+0x4c8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d118      	bne.n	8001838 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001806:	4b7f      	ldr	r3, [pc, #508]	@ (8001a04 <HAL_RCC_OscConfig+0x4c8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a7e      	ldr	r2, [pc, #504]	@ (8001a04 <HAL_RCC_OscConfig+0x4c8>)
 800180c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001812:	f7ff fa89 	bl	8000d28 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181a:	f7ff fa85 	bl	8000d28 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b64      	cmp	r3, #100	@ 0x64
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e103      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182c:	4b75      	ldr	r3, [pc, #468]	@ (8001a04 <HAL_RCC_OscConfig+0x4c8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d106      	bne.n	800184e <HAL_RCC_OscConfig+0x312>
 8001840:	4b6f      	ldr	r3, [pc, #444]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4a6e      	ldr	r2, [pc, #440]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6213      	str	r3, [r2, #32]
 800184c:	e02d      	b.n	80018aa <HAL_RCC_OscConfig+0x36e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0x334>
 8001856:	4b6a      	ldr	r3, [pc, #424]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4a69      	ldr	r2, [pc, #420]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	6213      	str	r3, [r2, #32]
 8001862:	4b67      	ldr	r3, [pc, #412]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4a66      	ldr	r2, [pc, #408]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	f023 0304 	bic.w	r3, r3, #4
 800186c:	6213      	str	r3, [r2, #32]
 800186e:	e01c      	b.n	80018aa <HAL_RCC_OscConfig+0x36e>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b05      	cmp	r3, #5
 8001876:	d10c      	bne.n	8001892 <HAL_RCC_OscConfig+0x356>
 8001878:	4b61      	ldr	r3, [pc, #388]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4a60      	ldr	r2, [pc, #384]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	6213      	str	r3, [r2, #32]
 8001884:	4b5e      	ldr	r3, [pc, #376]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	4a5d      	ldr	r2, [pc, #372]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6213      	str	r3, [r2, #32]
 8001890:	e00b      	b.n	80018aa <HAL_RCC_OscConfig+0x36e>
 8001892:	4b5b      	ldr	r3, [pc, #364]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	4a5a      	ldr	r2, [pc, #360]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	6213      	str	r3, [r2, #32]
 800189e:	4b58      	ldr	r3, [pc, #352]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	4a57      	ldr	r2, [pc, #348]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	f023 0304 	bic.w	r3, r3, #4
 80018a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d015      	beq.n	80018de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b2:	f7ff fa39 	bl	8000d28 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b8:	e00a      	b.n	80018d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ba:	f7ff fa35 	bl	8000d28 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e0b1      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ee      	beq.n	80018ba <HAL_RCC_OscConfig+0x37e>
 80018dc:	e014      	b.n	8001908 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018de:	f7ff fa23 	bl	8000d28 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e4:	e00a      	b.n	80018fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7ff fa1f 	bl	8000d28 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e09b      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fc:	4b40      	ldr	r3, [pc, #256]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1ee      	bne.n	80018e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d105      	bne.n	800191a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	4a3b      	ldr	r2, [pc, #236]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001918:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8087 	beq.w	8001a32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001924:	4b36      	ldr	r3, [pc, #216]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b08      	cmp	r3, #8
 800192e:	d061      	beq.n	80019f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d146      	bne.n	80019c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001938:	4b33      	ldr	r3, [pc, #204]	@ (8001a08 <HAL_RCC_OscConfig+0x4cc>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff f9f3 	bl	8000d28 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001946:	f7ff f9ef 	bl	8000d28 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e06d      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001958:	4b29      	ldr	r3, [pc, #164]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f0      	bne.n	8001946 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800196c:	d108      	bne.n	8001980 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800196e:	4b24      	ldr	r3, [pc, #144]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	4921      	ldr	r1, [pc, #132]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001980:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a19      	ldr	r1, [r3, #32]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001990:	430b      	orrs	r3, r1
 8001992:	491b      	ldr	r1, [pc, #108]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001998:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <HAL_RCC_OscConfig+0x4cc>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff f9c3 	bl	8000d28 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a6:	f7ff f9bf 	bl	8000d28 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e03d      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b8:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x46a>
 80019c4:	e035      	b.n	8001a32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c6:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <HAL_RCC_OscConfig+0x4cc>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff f9ac 	bl	8000d28 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff f9a8 	bl	8000d28 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e026      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e6:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x498>
 80019f2:	e01e      	b.n	8001a32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d107      	bne.n	8001a0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e019      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40007000 	.word	0x40007000
 8001a08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <HAL_RCC_OscConfig+0x500>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d106      	bne.n	8001a2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000

08001a40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0d0      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a54:	4b6a      	ldr	r3, [pc, #424]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d910      	bls.n	8001a84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b67      	ldr	r3, [pc, #412]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 0207 	bic.w	r2, r3, #7
 8001a6a:	4965      	ldr	r1, [pc, #404]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b63      	ldr	r3, [pc, #396]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0b8      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d020      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a9c:	4b59      	ldr	r3, [pc, #356]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4a58      	ldr	r2, [pc, #352]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001aa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab4:	4b53      	ldr	r3, [pc, #332]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4a52      	ldr	r2, [pc, #328]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001abe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b50      	ldr	r3, [pc, #320]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	494d      	ldr	r1, [pc, #308]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d040      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	4b47      	ldr	r3, [pc, #284]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d115      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e07f      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afe:	4b41      	ldr	r3, [pc, #260]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e073      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e06b      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1e:	4b39      	ldr	r3, [pc, #228]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f023 0203 	bic.w	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4936      	ldr	r1, [pc, #216]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b30:	f7ff f8fa 	bl	8000d28 <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b38:	f7ff f8f6 	bl	8000d28 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e053      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 020c 	and.w	r2, r3, #12
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d1eb      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b60:	4b27      	ldr	r3, [pc, #156]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d210      	bcs.n	8001b90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b24      	ldr	r3, [pc, #144]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 0207 	bic.w	r2, r3, #7
 8001b76:	4922      	ldr	r1, [pc, #136]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b20      	ldr	r3, [pc, #128]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e032      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9c:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4916      	ldr	r1, [pc, #88]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d009      	beq.n	8001bce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bba:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	490e      	ldr	r1, [pc, #56]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bce:	f000 f821 	bl	8001c14 <HAL_RCC_GetSysClockFreq>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	490a      	ldr	r1, [pc, #40]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001be0:	5ccb      	ldrb	r3, [r1, r3]
 8001be2:	fa22 f303 	lsr.w	r3, r2, r3
 8001be6:	4a09      	ldr	r2, [pc, #36]	@ (8001c0c <HAL_RCC_ClockConfig+0x1cc>)
 8001be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <HAL_RCC_ClockConfig+0x1d0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff f858 	bl	8000ca4 <HAL_InitTick>

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40022000 	.word	0x40022000
 8001c04:	40021000 	.word	0x40021000
 8001c08:	08003e48 	.word	0x08003e48
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	20000004 	.word	0x20000004

08001c14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d002      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x30>
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d003      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x36>
 8001c42:	e027      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c44:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x98>)
 8001c46:	613b      	str	r3, [r7, #16]
      break;
 8001c48:	e027      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	0c9b      	lsrs	r3, r3, #18
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	4a17      	ldr	r2, [pc, #92]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c54:	5cd3      	ldrb	r3, [r2, r3]
 8001c56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d010      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c62:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	0c5b      	lsrs	r3, r3, #17
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	4a11      	ldr	r2, [pc, #68]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c6e:	5cd3      	ldrb	r3, [r2, r3]
 8001c70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a0d      	ldr	r2, [pc, #52]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x98>)
 8001c76:	fb03 f202 	mul.w	r2, r3, r2
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e004      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c88:	fb02 f303 	mul.w	r3, r2, r3
 8001c8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	613b      	str	r3, [r7, #16]
      break;
 8001c92:	e002      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x98>)
 8001c96:	613b      	str	r3, [r7, #16]
      break;
 8001c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9a:	693b      	ldr	r3, [r7, #16]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	007a1200 	.word	0x007a1200
 8001cb0:	08003e60 	.word	0x08003e60
 8001cb4:	08003e70 	.word	0x08003e70
 8001cb8:	003d0900 	.word	0x003d0900

08001cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc0:	4b02      	ldr	r3, [pc, #8]	@ (8001ccc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	20000000 	.word	0x20000000

08001cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cd4:	f7ff fff2 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	0a1b      	lsrs	r3, r3, #8
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	4903      	ldr	r1, [pc, #12]	@ (8001cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	08003e58 	.word	0x08003e58

08001cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cfc:	f7ff ffde 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	0adb      	lsrs	r3, r3, #11
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	4903      	ldr	r1, [pc, #12]	@ (8001d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	08003e58 	.word	0x08003e58

08001d20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d28:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <RCC_Delay+0x34>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d58 <RCC_Delay+0x38>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	0a5b      	lsrs	r3, r3, #9
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	fb02 f303 	mul.w	r3, r2, r3
 8001d3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d3c:	bf00      	nop
  }
  while (Delay --);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1e5a      	subs	r2, r3, #1
 8001d42:	60fa      	str	r2, [r7, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f9      	bne.n	8001d3c <RCC_Delay+0x1c>
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	20000000 	.word	0x20000000
 8001d58:	10624dd3 	.word	0x10624dd3

08001d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e041      	b.n	8001df2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d106      	bne.n	8001d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7fe fd9e 	bl	80008c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3304      	adds	r3, #4
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	f000 fb60 	bl	8002460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d001      	beq.n	8001e14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e032      	b.n	8001e7a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a18      	ldr	r2, [pc, #96]	@ (8001e84 <HAL_TIM_Base_Start+0x88>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00e      	beq.n	8001e44 <HAL_TIM_Base_Start+0x48>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e2e:	d009      	beq.n	8001e44 <HAL_TIM_Base_Start+0x48>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a14      	ldr	r2, [pc, #80]	@ (8001e88 <HAL_TIM_Base_Start+0x8c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d004      	beq.n	8001e44 <HAL_TIM_Base_Start+0x48>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a13      	ldr	r2, [pc, #76]	@ (8001e8c <HAL_TIM_Base_Start+0x90>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d111      	bne.n	8001e68 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d010      	beq.n	8001e78 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 0201 	orr.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e66:	e007      	b.n	8001e78 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	40012c00 	.word	0x40012c00
 8001e88:	40000400 	.word	0x40000400
 8001e8c:	40000800 	.word	0x40000800

08001e90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e041      	b.n	8001f26 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f839 	bl	8001f2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4610      	mov	r0, r2
 8001ed0:	f000 fac6 	bl	8002460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <HAL_TIM_PWM_Start+0x24>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	bf14      	ite	ne
 8001f5c:	2301      	movne	r3, #1
 8001f5e:	2300      	moveq	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	e022      	b.n	8001faa <HAL_TIM_PWM_Start+0x6a>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d109      	bne.n	8001f7e <HAL_TIM_PWM_Start+0x3e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	bf14      	ite	ne
 8001f76:	2301      	movne	r3, #1
 8001f78:	2300      	moveq	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	e015      	b.n	8001faa <HAL_TIM_PWM_Start+0x6a>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	d109      	bne.n	8001f98 <HAL_TIM_PWM_Start+0x58>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	bf14      	ite	ne
 8001f90:	2301      	movne	r3, #1
 8001f92:	2300      	moveq	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	e008      	b.n	8001faa <HAL_TIM_PWM_Start+0x6a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	bf14      	ite	ne
 8001fa4:	2301      	movne	r3, #1
 8001fa6:	2300      	moveq	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e05e      	b.n	8002070 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d104      	bne.n	8001fc2 <HAL_TIM_PWM_Start+0x82>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fc0:	e013      	b.n	8001fea <HAL_TIM_PWM_Start+0xaa>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d104      	bne.n	8001fd2 <HAL_TIM_PWM_Start+0x92>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fd0:	e00b      	b.n	8001fea <HAL_TIM_PWM_Start+0xaa>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d104      	bne.n	8001fe2 <HAL_TIM_PWM_Start+0xa2>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fe0:	e003      	b.n	8001fea <HAL_TIM_PWM_Start+0xaa>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	6839      	ldr	r1, [r7, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fcc0 	bl	8002978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8002078 <HAL_TIM_PWM_Start+0x138>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d107      	bne.n	8002012 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002010:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a18      	ldr	r2, [pc, #96]	@ (8002078 <HAL_TIM_PWM_Start+0x138>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d00e      	beq.n	800203a <HAL_TIM_PWM_Start+0xfa>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002024:	d009      	beq.n	800203a <HAL_TIM_PWM_Start+0xfa>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a14      	ldr	r2, [pc, #80]	@ (800207c <HAL_TIM_PWM_Start+0x13c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d004      	beq.n	800203a <HAL_TIM_PWM_Start+0xfa>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a12      	ldr	r2, [pc, #72]	@ (8002080 <HAL_TIM_PWM_Start+0x140>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d111      	bne.n	800205e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b06      	cmp	r3, #6
 800204a:	d010      	beq.n	800206e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0201 	orr.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800205c:	e007      	b.n	800206e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f042 0201 	orr.w	r2, r2, #1
 800206c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40012c00 	.word	0x40012c00
 800207c:	40000400 	.word	0x40000400
 8002080:	40000800 	.word	0x40000800

08002084 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2200      	movs	r2, #0
 8002094:	6839      	ldr	r1, [r7, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f000 fc6e 	bl	8002978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a29      	ldr	r2, [pc, #164]	@ (8002148 <HAL_TIM_PWM_Stop+0xc4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d117      	bne.n	80020d6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6a1a      	ldr	r2, [r3, #32]
 80020ac:	f241 1311 	movw	r3, #4369	@ 0x1111
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10f      	bne.n	80020d6 <HAL_TIM_PWM_Stop+0x52>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6a1a      	ldr	r2, [r3, #32]
 80020bc:	f240 4344 	movw	r3, #1092	@ 0x444
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d107      	bne.n	80020d6 <HAL_TIM_PWM_Stop+0x52>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6a1a      	ldr	r2, [r3, #32]
 80020dc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10f      	bne.n	8002106 <HAL_TIM_PWM_Stop+0x82>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6a1a      	ldr	r2, [r3, #32]
 80020ec:	f240 4344 	movw	r3, #1092	@ 0x444
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d107      	bne.n	8002106 <HAL_TIM_PWM_Stop+0x82>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0201 	bic.w	r2, r2, #1
 8002104:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d104      	bne.n	8002116 <HAL_TIM_PWM_Stop+0x92>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002114:	e013      	b.n	800213e <HAL_TIM_PWM_Stop+0xba>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b04      	cmp	r3, #4
 800211a:	d104      	bne.n	8002126 <HAL_TIM_PWM_Stop+0xa2>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002124:	e00b      	b.n	800213e <HAL_TIM_PWM_Stop+0xba>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b08      	cmp	r3, #8
 800212a:	d104      	bne.n	8002136 <HAL_TIM_PWM_Stop+0xb2>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002134:	e003      	b.n	800213e <HAL_TIM_PWM_Stop+0xba>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40012c00 	.word	0x40012c00

0800214c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002166:	2302      	movs	r3, #2
 8002168:	e0ae      	b.n	80022c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b0c      	cmp	r3, #12
 8002176:	f200 809f 	bhi.w	80022b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800217a:	a201      	add	r2, pc, #4	@ (adr r2, 8002180 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800217c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002180:	080021b5 	.word	0x080021b5
 8002184:	080022b9 	.word	0x080022b9
 8002188:	080022b9 	.word	0x080022b9
 800218c:	080022b9 	.word	0x080022b9
 8002190:	080021f5 	.word	0x080021f5
 8002194:	080022b9 	.word	0x080022b9
 8002198:	080022b9 	.word	0x080022b9
 800219c:	080022b9 	.word	0x080022b9
 80021a0:	08002237 	.word	0x08002237
 80021a4:	080022b9 	.word	0x080022b9
 80021a8:	080022b9 	.word	0x080022b9
 80021ac:	080022b9 	.word	0x080022b9
 80021b0:	08002277 	.word	0x08002277
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f9be 	bl	800253c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699a      	ldr	r2, [r3, #24]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0208 	orr.w	r2, r2, #8
 80021ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0204 	bic.w	r2, r2, #4
 80021de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6999      	ldr	r1, [r3, #24]
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	619a      	str	r2, [r3, #24]
      break;
 80021f2:	e064      	b.n	80022be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fa04 	bl	8002608 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800220e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800221e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6999      	ldr	r1, [r3, #24]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	021a      	lsls	r2, r3, #8
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	619a      	str	r2, [r3, #24]
      break;
 8002234:	e043      	b.n	80022be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	4618      	mov	r0, r3
 800223e:	f000 fa4d 	bl	80026dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	69da      	ldr	r2, [r3, #28]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0208 	orr.w	r2, r2, #8
 8002250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69da      	ldr	r2, [r3, #28]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0204 	bic.w	r2, r2, #4
 8002260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	69d9      	ldr	r1, [r3, #28]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	61da      	str	r2, [r3, #28]
      break;
 8002274:	e023      	b.n	80022be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fa97 	bl	80027b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	69da      	ldr	r2, [r3, #28]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	69d9      	ldr	r1, [r3, #28]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	021a      	lsls	r2, r3, #8
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	61da      	str	r2, [r3, #28]
      break;
 80022b6:	e002      	b.n	80022be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	75fb      	strb	r3, [r7, #23]
      break;
 80022bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80022c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_TIM_ConfigClockSource+0x1c>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e0b4      	b.n	8002456 <HAL_TIM_ConfigClockSource+0x186>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800230a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002312:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002324:	d03e      	beq.n	80023a4 <HAL_TIM_ConfigClockSource+0xd4>
 8002326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800232a:	f200 8087 	bhi.w	800243c <HAL_TIM_ConfigClockSource+0x16c>
 800232e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002332:	f000 8086 	beq.w	8002442 <HAL_TIM_ConfigClockSource+0x172>
 8002336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800233a:	d87f      	bhi.n	800243c <HAL_TIM_ConfigClockSource+0x16c>
 800233c:	2b70      	cmp	r3, #112	@ 0x70
 800233e:	d01a      	beq.n	8002376 <HAL_TIM_ConfigClockSource+0xa6>
 8002340:	2b70      	cmp	r3, #112	@ 0x70
 8002342:	d87b      	bhi.n	800243c <HAL_TIM_ConfigClockSource+0x16c>
 8002344:	2b60      	cmp	r3, #96	@ 0x60
 8002346:	d050      	beq.n	80023ea <HAL_TIM_ConfigClockSource+0x11a>
 8002348:	2b60      	cmp	r3, #96	@ 0x60
 800234a:	d877      	bhi.n	800243c <HAL_TIM_ConfigClockSource+0x16c>
 800234c:	2b50      	cmp	r3, #80	@ 0x50
 800234e:	d03c      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0xfa>
 8002350:	2b50      	cmp	r3, #80	@ 0x50
 8002352:	d873      	bhi.n	800243c <HAL_TIM_ConfigClockSource+0x16c>
 8002354:	2b40      	cmp	r3, #64	@ 0x40
 8002356:	d058      	beq.n	800240a <HAL_TIM_ConfigClockSource+0x13a>
 8002358:	2b40      	cmp	r3, #64	@ 0x40
 800235a:	d86f      	bhi.n	800243c <HAL_TIM_ConfigClockSource+0x16c>
 800235c:	2b30      	cmp	r3, #48	@ 0x30
 800235e:	d064      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x15a>
 8002360:	2b30      	cmp	r3, #48	@ 0x30
 8002362:	d86b      	bhi.n	800243c <HAL_TIM_ConfigClockSource+0x16c>
 8002364:	2b20      	cmp	r3, #32
 8002366:	d060      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x15a>
 8002368:	2b20      	cmp	r3, #32
 800236a:	d867      	bhi.n	800243c <HAL_TIM_ConfigClockSource+0x16c>
 800236c:	2b00      	cmp	r3, #0
 800236e:	d05c      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x15a>
 8002370:	2b10      	cmp	r3, #16
 8002372:	d05a      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x15a>
 8002374:	e062      	b.n	800243c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002386:	f000 fad8 	bl	800293a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002398:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	609a      	str	r2, [r3, #8]
      break;
 80023a2:	e04f      	b.n	8002444 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023b4:	f000 fac1 	bl	800293a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023c6:	609a      	str	r2, [r3, #8]
      break;
 80023c8:	e03c      	b.n	8002444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d6:	461a      	mov	r2, r3
 80023d8:	f000 fa38 	bl	800284c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2150      	movs	r1, #80	@ 0x50
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fa8f 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 80023e8:	e02c      	b.n	8002444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023f6:	461a      	mov	r2, r3
 80023f8:	f000 fa56 	bl	80028a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2160      	movs	r1, #96	@ 0x60
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fa7f 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 8002408:	e01c      	b.n	8002444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002416:	461a      	mov	r2, r3
 8002418:	f000 fa18 	bl	800284c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2140      	movs	r1, #64	@ 0x40
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fa6f 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 8002428:	e00c      	b.n	8002444 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4619      	mov	r1, r3
 8002434:	4610      	mov	r0, r2
 8002436:	f000 fa66 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 800243a:	e003      	b.n	8002444 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
      break;
 8002440:	e000      	b.n	8002444 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a2f      	ldr	r2, [pc, #188]	@ (8002530 <TIM_Base_SetConfig+0xd0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d00b      	beq.n	8002490 <TIM_Base_SetConfig+0x30>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800247e:	d007      	beq.n	8002490 <TIM_Base_SetConfig+0x30>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a2c      	ldr	r2, [pc, #176]	@ (8002534 <TIM_Base_SetConfig+0xd4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d003      	beq.n	8002490 <TIM_Base_SetConfig+0x30>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a2b      	ldr	r2, [pc, #172]	@ (8002538 <TIM_Base_SetConfig+0xd8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d108      	bne.n	80024a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a22      	ldr	r2, [pc, #136]	@ (8002530 <TIM_Base_SetConfig+0xd0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00b      	beq.n	80024c2 <TIM_Base_SetConfig+0x62>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024b0:	d007      	beq.n	80024c2 <TIM_Base_SetConfig+0x62>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002534 <TIM_Base_SetConfig+0xd4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d003      	beq.n	80024c2 <TIM_Base_SetConfig+0x62>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002538 <TIM_Base_SetConfig+0xd8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d108      	bne.n	80024d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a0d      	ldr	r2, [pc, #52]	@ (8002530 <TIM_Base_SetConfig+0xd0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d103      	bne.n	8002508 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f023 0201 	bic.w	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	611a      	str	r2, [r3, #16]
  }
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	40012c00 	.word	0x40012c00
 8002534:	40000400 	.word	0x40000400
 8002538:	40000800 	.word	0x40000800

0800253c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f023 0201 	bic.w	r2, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800256a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f023 0303 	bic.w	r3, r3, #3
 8002572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f023 0302 	bic.w	r3, r3, #2
 8002584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a1c      	ldr	r2, [pc, #112]	@ (8002604 <TIM_OC1_SetConfig+0xc8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d10c      	bne.n	80025b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f023 0308 	bic.w	r3, r3, #8
 800259e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f023 0304 	bic.w	r3, r3, #4
 80025b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a13      	ldr	r2, [pc, #76]	@ (8002604 <TIM_OC1_SetConfig+0xc8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d111      	bne.n	80025de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80025c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	621a      	str	r2, [r3, #32]
}
 80025f8:	bf00      	nop
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40012c00 	.word	0x40012c00

08002608 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f023 0210 	bic.w	r2, r3, #16
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800263e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f023 0320 	bic.w	r3, r3, #32
 8002652:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4313      	orrs	r3, r2
 800265e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a1d      	ldr	r2, [pc, #116]	@ (80026d8 <TIM_OC2_SetConfig+0xd0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d10d      	bne.n	8002684 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800266e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002682:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a14      	ldr	r2, [pc, #80]	@ (80026d8 <TIM_OC2_SetConfig+0xd0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d113      	bne.n	80026b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002692:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800269a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	621a      	str	r2, [r3, #32]
}
 80026ce:	bf00      	nop
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	40012c00 	.word	0x40012c00

080026dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800270a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0303 	bic.w	r3, r3, #3
 8002712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	4313      	orrs	r3, r2
 8002730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a1d      	ldr	r2, [pc, #116]	@ (80027ac <TIM_OC3_SetConfig+0xd0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d10d      	bne.n	8002756 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002740:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a14      	ldr	r2, [pc, #80]	@ (80027ac <TIM_OC3_SetConfig+0xd0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d113      	bne.n	8002786 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800276c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	621a      	str	r2, [r3, #32]
}
 80027a0:	bf00      	nop
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40012c00 	.word	0x40012c00

080027b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80027fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	031b      	lsls	r3, r3, #12
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a0f      	ldr	r2, [pc, #60]	@ (8002848 <TIM_OC4_SetConfig+0x98>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d109      	bne.n	8002824 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002816:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	019b      	lsls	r3, r3, #6
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4313      	orrs	r3, r2
 8002822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	621a      	str	r2, [r3, #32]
}
 800283e:	bf00      	nop
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	40012c00 	.word	0x40012c00

0800284c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f023 0201 	bic.w	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f023 030a 	bic.w	r3, r3, #10
 8002888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	621a      	str	r2, [r3, #32]
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	f023 0210 	bic.w	r2, r3, #16
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80028d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	031b      	lsls	r3, r3, #12
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80028e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	621a      	str	r2, [r3, #32]
}
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800291c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	f043 0307 	orr.w	r3, r3, #7
 8002928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	609a      	str	r2, [r3, #8]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800293a:	b480      	push	{r7}
 800293c:	b087      	sub	sp, #28
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002954:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	021a      	lsls	r2, r3, #8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	431a      	orrs	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4313      	orrs	r3, r2
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	609a      	str	r2, [r3, #8]
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2201      	movs	r2, #1
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a1a      	ldr	r2, [r3, #32]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	43db      	mvns	r3, r3
 800299a:	401a      	ands	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a1a      	ldr	r2, [r3, #32]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	431a      	orrs	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	621a      	str	r2, [r3, #32]
}
 80029b6:	bf00      	nop
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e046      	b.n	8002a66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a16      	ldr	r2, [pc, #88]	@ (8002a70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00e      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a24:	d009      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a12      	ldr	r2, [pc, #72]	@ (8002a74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d004      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a10      	ldr	r2, [pc, #64]	@ (8002a78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d10c      	bne.n	8002a54 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	40012c00 	.word	0x40012c00
 8002a74:	40000400 	.word	0x40000400
 8002a78:	40000800 	.word	0x40000800

08002a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e042      	b.n	8002b14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fd ff72 	bl	800098c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2224      	movs	r2, #36	@ 0x24
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f971 	bl	8002da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	@ 0x28
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d175      	bne.n	8002c28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <HAL_UART_Transmit+0x2c>
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e06e      	b.n	8002c2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2221      	movs	r2, #33	@ 0x21
 8002b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b5a:	f7fe f8e5 	bl	8000d28 <HAL_GetTick>
 8002b5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	88fa      	ldrh	r2, [r7, #6]
 8002b64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	88fa      	ldrh	r2, [r7, #6]
 8002b6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b74:	d108      	bne.n	8002b88 <HAL_UART_Transmit+0x6c>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d104      	bne.n	8002b88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	61bb      	str	r3, [r7, #24]
 8002b86:	e003      	b.n	8002b90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b90:	e02e      	b.n	8002bf0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2180      	movs	r1, #128	@ 0x80
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 f848 	bl	8002c32 <UART_WaitOnFlagUntilTimeout>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e03a      	b.n	8002c2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	3302      	adds	r3, #2
 8002bce:	61bb      	str	r3, [r7, #24]
 8002bd0:	e007      	b.n	8002be2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	3301      	adds	r3, #1
 8002be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1cb      	bne.n	8002b92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2200      	movs	r2, #0
 8002c02:	2140      	movs	r1, #64	@ 0x40
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f814 	bl	8002c32 <UART_WaitOnFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e006      	b.n	8002c2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e000      	b.n	8002c2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c28:	2302      	movs	r3, #2
  }
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3720      	adds	r7, #32
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	603b      	str	r3, [r7, #0]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c42:	e03b      	b.n	8002cbc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4a:	d037      	beq.n	8002cbc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4c:	f7fe f86c 	bl	8000d28 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	6a3a      	ldr	r2, [r7, #32]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d302      	bcc.n	8002c62 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e03a      	b.n	8002cdc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d023      	beq.n	8002cbc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b80      	cmp	r3, #128	@ 0x80
 8002c78:	d020      	beq.n	8002cbc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b40      	cmp	r3, #64	@ 0x40
 8002c7e:	d01d      	beq.n	8002cbc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d116      	bne.n	8002cbc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f81d 	bl	8002ce4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2208      	movs	r2, #8
 8002cae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e00f      	b.n	8002cdc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d0b4      	beq.n	8002c44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b095      	sub	sp, #84	@ 0x54
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	330c      	adds	r3, #12
 8002cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf6:	e853 3f00 	ldrex	r3, [r3]
 8002cfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	330c      	adds	r3, #12
 8002d0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d0c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d14:	e841 2300 	strex	r3, r2, [r1]
 8002d18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e5      	bne.n	8002cec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3314      	adds	r3, #20
 8002d26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	e853 3f00 	ldrex	r3, [r3]
 8002d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f023 0301 	bic.w	r3, r3, #1
 8002d36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3314      	adds	r3, #20
 8002d3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d48:	e841 2300 	strex	r3, r2, [r1]
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1e5      	bne.n	8002d20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d119      	bne.n	8002d90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	330c      	adds	r3, #12
 8002d62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	e853 3f00 	ldrex	r3, [r3]
 8002d6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f023 0310 	bic.w	r3, r3, #16
 8002d72:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	330c      	adds	r3, #12
 8002d7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d7c:	61ba      	str	r2, [r7, #24]
 8002d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d80:	6979      	ldr	r1, [r7, #20]
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	e841 2300 	strex	r3, r2, [r1]
 8002d88:	613b      	str	r3, [r7, #16]
   return(result);
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1e5      	bne.n	8002d5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d9e:	bf00      	nop
 8002da0:	3754      	adds	r7, #84	@ 0x54
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002de2:	f023 030c 	bic.w	r3, r3, #12
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a2c      	ldr	r2, [pc, #176]	@ (8002ebc <UART_SetConfig+0x114>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d103      	bne.n	8002e18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e10:	f7fe ff72 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	e002      	b.n	8002e1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e18:	f7fe ff5a 	bl	8001cd0 <HAL_RCC_GetPCLK1Freq>
 8002e1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	009a      	lsls	r2, r3, #2
 8002e28:	441a      	add	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	4a22      	ldr	r2, [pc, #136]	@ (8002ec0 <UART_SetConfig+0x118>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	0119      	lsls	r1, r3, #4
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	009a      	lsls	r2, r3, #2
 8002e48:	441a      	add	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e54:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec0 <UART_SetConfig+0x118>)
 8002e56:	fba3 0302 	umull	r0, r3, r3, r2
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	2064      	movs	r0, #100	@ 0x64
 8002e5e:	fb00 f303 	mul.w	r3, r0, r3
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	3332      	adds	r3, #50	@ 0x32
 8002e68:	4a15      	ldr	r2, [pc, #84]	@ (8002ec0 <UART_SetConfig+0x118>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e74:	4419      	add	r1, r3
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009a      	lsls	r2, r3, #2
 8002e80:	441a      	add	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <UART_SetConfig+0x118>)
 8002e8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2064      	movs	r0, #100	@ 0x64
 8002e96:	fb00 f303 	mul.w	r3, r0, r3
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	3332      	adds	r3, #50	@ 0x32
 8002ea0:	4a07      	ldr	r2, [pc, #28]	@ (8002ec0 <UART_SetConfig+0x118>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	f003 020f 	and.w	r2, r3, #15
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	440a      	add	r2, r1
 8002eb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002eb4:	bf00      	nop
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40013800 	.word	0x40013800
 8002ec0:	51eb851f 	.word	0x51eb851f

08002ec4 <std>:
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	b510      	push	{r4, lr}
 8002ec8:	4604      	mov	r4, r0
 8002eca:	e9c0 3300 	strd	r3, r3, [r0]
 8002ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ed2:	6083      	str	r3, [r0, #8]
 8002ed4:	8181      	strh	r1, [r0, #12]
 8002ed6:	6643      	str	r3, [r0, #100]	@ 0x64
 8002ed8:	81c2      	strh	r2, [r0, #14]
 8002eda:	6183      	str	r3, [r0, #24]
 8002edc:	4619      	mov	r1, r3
 8002ede:	2208      	movs	r2, #8
 8002ee0:	305c      	adds	r0, #92	@ 0x5c
 8002ee2:	f000 f9f9 	bl	80032d8 <memset>
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <std+0x58>)
 8002ee8:	6224      	str	r4, [r4, #32]
 8002eea:	6263      	str	r3, [r4, #36]	@ 0x24
 8002eec:	4b0c      	ldr	r3, [pc, #48]	@ (8002f20 <std+0x5c>)
 8002eee:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f24 <std+0x60>)
 8002ef2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <std+0x64>)
 8002ef6:	6323      	str	r3, [r4, #48]	@ 0x30
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <std+0x68>)
 8002efa:	429c      	cmp	r4, r3
 8002efc:	d006      	beq.n	8002f0c <std+0x48>
 8002efe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f02:	4294      	cmp	r4, r2
 8002f04:	d002      	beq.n	8002f0c <std+0x48>
 8002f06:	33d0      	adds	r3, #208	@ 0xd0
 8002f08:	429c      	cmp	r4, r3
 8002f0a:	d105      	bne.n	8002f18 <std+0x54>
 8002f0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f14:	f000 ba58 	b.w	80033c8 <__retarget_lock_init_recursive>
 8002f18:	bd10      	pop	{r4, pc}
 8002f1a:	bf00      	nop
 8002f1c:	08003129 	.word	0x08003129
 8002f20:	0800314b 	.word	0x0800314b
 8002f24:	08003183 	.word	0x08003183
 8002f28:	080031a7 	.word	0x080031a7
 8002f2c:	200001d8 	.word	0x200001d8

08002f30 <stdio_exit_handler>:
 8002f30:	4a02      	ldr	r2, [pc, #8]	@ (8002f3c <stdio_exit_handler+0xc>)
 8002f32:	4903      	ldr	r1, [pc, #12]	@ (8002f40 <stdio_exit_handler+0x10>)
 8002f34:	4803      	ldr	r0, [pc, #12]	@ (8002f44 <stdio_exit_handler+0x14>)
 8002f36:	f000 b869 	b.w	800300c <_fwalk_sglue>
 8002f3a:	bf00      	nop
 8002f3c:	2000000c 	.word	0x2000000c
 8002f40:	08003c5d 	.word	0x08003c5d
 8002f44:	2000001c 	.word	0x2000001c

08002f48 <cleanup_stdio>:
 8002f48:	6841      	ldr	r1, [r0, #4]
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f7c <cleanup_stdio+0x34>)
 8002f4c:	b510      	push	{r4, lr}
 8002f4e:	4299      	cmp	r1, r3
 8002f50:	4604      	mov	r4, r0
 8002f52:	d001      	beq.n	8002f58 <cleanup_stdio+0x10>
 8002f54:	f000 fe82 	bl	8003c5c <_fflush_r>
 8002f58:	68a1      	ldr	r1, [r4, #8]
 8002f5a:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <cleanup_stdio+0x38>)
 8002f5c:	4299      	cmp	r1, r3
 8002f5e:	d002      	beq.n	8002f66 <cleanup_stdio+0x1e>
 8002f60:	4620      	mov	r0, r4
 8002f62:	f000 fe7b 	bl	8003c5c <_fflush_r>
 8002f66:	68e1      	ldr	r1, [r4, #12]
 8002f68:	4b06      	ldr	r3, [pc, #24]	@ (8002f84 <cleanup_stdio+0x3c>)
 8002f6a:	4299      	cmp	r1, r3
 8002f6c:	d004      	beq.n	8002f78 <cleanup_stdio+0x30>
 8002f6e:	4620      	mov	r0, r4
 8002f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f74:	f000 be72 	b.w	8003c5c <_fflush_r>
 8002f78:	bd10      	pop	{r4, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200001d8 	.word	0x200001d8
 8002f80:	20000240 	.word	0x20000240
 8002f84:	200002a8 	.word	0x200002a8

08002f88 <global_stdio_init.part.0>:
 8002f88:	b510      	push	{r4, lr}
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <global_stdio_init.part.0+0x30>)
 8002f8c:	4c0b      	ldr	r4, [pc, #44]	@ (8002fbc <global_stdio_init.part.0+0x34>)
 8002f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002fc0 <global_stdio_init.part.0+0x38>)
 8002f90:	4620      	mov	r0, r4
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	2104      	movs	r1, #4
 8002f96:	2200      	movs	r2, #0
 8002f98:	f7ff ff94 	bl	8002ec4 <std>
 8002f9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	2109      	movs	r1, #9
 8002fa4:	f7ff ff8e 	bl	8002ec4 <std>
 8002fa8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002fac:	2202      	movs	r2, #2
 8002fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fb2:	2112      	movs	r1, #18
 8002fb4:	f7ff bf86 	b.w	8002ec4 <std>
 8002fb8:	20000310 	.word	0x20000310
 8002fbc:	200001d8 	.word	0x200001d8
 8002fc0:	08002f31 	.word	0x08002f31

08002fc4 <__sfp_lock_acquire>:
 8002fc4:	4801      	ldr	r0, [pc, #4]	@ (8002fcc <__sfp_lock_acquire+0x8>)
 8002fc6:	f000 ba00 	b.w	80033ca <__retarget_lock_acquire_recursive>
 8002fca:	bf00      	nop
 8002fcc:	20000319 	.word	0x20000319

08002fd0 <__sfp_lock_release>:
 8002fd0:	4801      	ldr	r0, [pc, #4]	@ (8002fd8 <__sfp_lock_release+0x8>)
 8002fd2:	f000 b9fb 	b.w	80033cc <__retarget_lock_release_recursive>
 8002fd6:	bf00      	nop
 8002fd8:	20000319 	.word	0x20000319

08002fdc <__sinit>:
 8002fdc:	b510      	push	{r4, lr}
 8002fde:	4604      	mov	r4, r0
 8002fe0:	f7ff fff0 	bl	8002fc4 <__sfp_lock_acquire>
 8002fe4:	6a23      	ldr	r3, [r4, #32]
 8002fe6:	b11b      	cbz	r3, 8002ff0 <__sinit+0x14>
 8002fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fec:	f7ff bff0 	b.w	8002fd0 <__sfp_lock_release>
 8002ff0:	4b04      	ldr	r3, [pc, #16]	@ (8003004 <__sinit+0x28>)
 8002ff2:	6223      	str	r3, [r4, #32]
 8002ff4:	4b04      	ldr	r3, [pc, #16]	@ (8003008 <__sinit+0x2c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f5      	bne.n	8002fe8 <__sinit+0xc>
 8002ffc:	f7ff ffc4 	bl	8002f88 <global_stdio_init.part.0>
 8003000:	e7f2      	b.n	8002fe8 <__sinit+0xc>
 8003002:	bf00      	nop
 8003004:	08002f49 	.word	0x08002f49
 8003008:	20000310 	.word	0x20000310

0800300c <_fwalk_sglue>:
 800300c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003010:	4607      	mov	r7, r0
 8003012:	4688      	mov	r8, r1
 8003014:	4614      	mov	r4, r2
 8003016:	2600      	movs	r6, #0
 8003018:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800301c:	f1b9 0901 	subs.w	r9, r9, #1
 8003020:	d505      	bpl.n	800302e <_fwalk_sglue+0x22>
 8003022:	6824      	ldr	r4, [r4, #0]
 8003024:	2c00      	cmp	r4, #0
 8003026:	d1f7      	bne.n	8003018 <_fwalk_sglue+0xc>
 8003028:	4630      	mov	r0, r6
 800302a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800302e:	89ab      	ldrh	r3, [r5, #12]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d907      	bls.n	8003044 <_fwalk_sglue+0x38>
 8003034:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003038:	3301      	adds	r3, #1
 800303a:	d003      	beq.n	8003044 <_fwalk_sglue+0x38>
 800303c:	4629      	mov	r1, r5
 800303e:	4638      	mov	r0, r7
 8003040:	47c0      	blx	r8
 8003042:	4306      	orrs	r6, r0
 8003044:	3568      	adds	r5, #104	@ 0x68
 8003046:	e7e9      	b.n	800301c <_fwalk_sglue+0x10>

08003048 <iprintf>:
 8003048:	b40f      	push	{r0, r1, r2, r3}
 800304a:	b507      	push	{r0, r1, r2, lr}
 800304c:	4906      	ldr	r1, [pc, #24]	@ (8003068 <iprintf+0x20>)
 800304e:	ab04      	add	r3, sp, #16
 8003050:	6808      	ldr	r0, [r1, #0]
 8003052:	f853 2b04 	ldr.w	r2, [r3], #4
 8003056:	6881      	ldr	r1, [r0, #8]
 8003058:	9301      	str	r3, [sp, #4]
 800305a:	f000 fad7 	bl	800360c <_vfiprintf_r>
 800305e:	b003      	add	sp, #12
 8003060:	f85d eb04 	ldr.w	lr, [sp], #4
 8003064:	b004      	add	sp, #16
 8003066:	4770      	bx	lr
 8003068:	20000018 	.word	0x20000018

0800306c <_puts_r>:
 800306c:	6a03      	ldr	r3, [r0, #32]
 800306e:	b570      	push	{r4, r5, r6, lr}
 8003070:	4605      	mov	r5, r0
 8003072:	460e      	mov	r6, r1
 8003074:	6884      	ldr	r4, [r0, #8]
 8003076:	b90b      	cbnz	r3, 800307c <_puts_r+0x10>
 8003078:	f7ff ffb0 	bl	8002fdc <__sinit>
 800307c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800307e:	07db      	lsls	r3, r3, #31
 8003080:	d405      	bmi.n	800308e <_puts_r+0x22>
 8003082:	89a3      	ldrh	r3, [r4, #12]
 8003084:	0598      	lsls	r0, r3, #22
 8003086:	d402      	bmi.n	800308e <_puts_r+0x22>
 8003088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800308a:	f000 f99e 	bl	80033ca <__retarget_lock_acquire_recursive>
 800308e:	89a3      	ldrh	r3, [r4, #12]
 8003090:	0719      	lsls	r1, r3, #28
 8003092:	d502      	bpl.n	800309a <_puts_r+0x2e>
 8003094:	6923      	ldr	r3, [r4, #16]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d135      	bne.n	8003106 <_puts_r+0x9a>
 800309a:	4621      	mov	r1, r4
 800309c:	4628      	mov	r0, r5
 800309e:	f000 f8c5 	bl	800322c <__swsetup_r>
 80030a2:	b380      	cbz	r0, 8003106 <_puts_r+0x9a>
 80030a4:	f04f 35ff 	mov.w	r5, #4294967295
 80030a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030aa:	07da      	lsls	r2, r3, #31
 80030ac:	d405      	bmi.n	80030ba <_puts_r+0x4e>
 80030ae:	89a3      	ldrh	r3, [r4, #12]
 80030b0:	059b      	lsls	r3, r3, #22
 80030b2:	d402      	bmi.n	80030ba <_puts_r+0x4e>
 80030b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030b6:	f000 f989 	bl	80033cc <__retarget_lock_release_recursive>
 80030ba:	4628      	mov	r0, r5
 80030bc:	bd70      	pop	{r4, r5, r6, pc}
 80030be:	2b00      	cmp	r3, #0
 80030c0:	da04      	bge.n	80030cc <_puts_r+0x60>
 80030c2:	69a2      	ldr	r2, [r4, #24]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	dc17      	bgt.n	80030f8 <_puts_r+0x8c>
 80030c8:	290a      	cmp	r1, #10
 80030ca:	d015      	beq.n	80030f8 <_puts_r+0x8c>
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	6022      	str	r2, [r4, #0]
 80030d2:	7019      	strb	r1, [r3, #0]
 80030d4:	68a3      	ldr	r3, [r4, #8]
 80030d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030da:	3b01      	subs	r3, #1
 80030dc:	60a3      	str	r3, [r4, #8]
 80030de:	2900      	cmp	r1, #0
 80030e0:	d1ed      	bne.n	80030be <_puts_r+0x52>
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	da11      	bge.n	800310a <_puts_r+0x9e>
 80030e6:	4622      	mov	r2, r4
 80030e8:	210a      	movs	r1, #10
 80030ea:	4628      	mov	r0, r5
 80030ec:	f000 f85f 	bl	80031ae <__swbuf_r>
 80030f0:	3001      	adds	r0, #1
 80030f2:	d0d7      	beq.n	80030a4 <_puts_r+0x38>
 80030f4:	250a      	movs	r5, #10
 80030f6:	e7d7      	b.n	80030a8 <_puts_r+0x3c>
 80030f8:	4622      	mov	r2, r4
 80030fa:	4628      	mov	r0, r5
 80030fc:	f000 f857 	bl	80031ae <__swbuf_r>
 8003100:	3001      	adds	r0, #1
 8003102:	d1e7      	bne.n	80030d4 <_puts_r+0x68>
 8003104:	e7ce      	b.n	80030a4 <_puts_r+0x38>
 8003106:	3e01      	subs	r6, #1
 8003108:	e7e4      	b.n	80030d4 <_puts_r+0x68>
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	6022      	str	r2, [r4, #0]
 8003110:	220a      	movs	r2, #10
 8003112:	701a      	strb	r2, [r3, #0]
 8003114:	e7ee      	b.n	80030f4 <_puts_r+0x88>
	...

08003118 <puts>:
 8003118:	4b02      	ldr	r3, [pc, #8]	@ (8003124 <puts+0xc>)
 800311a:	4601      	mov	r1, r0
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	f7ff bfa5 	b.w	800306c <_puts_r>
 8003122:	bf00      	nop
 8003124:	20000018 	.word	0x20000018

08003128 <__sread>:
 8003128:	b510      	push	{r4, lr}
 800312a:	460c      	mov	r4, r1
 800312c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003130:	f000 f8fc 	bl	800332c <_read_r>
 8003134:	2800      	cmp	r0, #0
 8003136:	bfab      	itete	ge
 8003138:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800313a:	89a3      	ldrhlt	r3, [r4, #12]
 800313c:	181b      	addge	r3, r3, r0
 800313e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003142:	bfac      	ite	ge
 8003144:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003146:	81a3      	strhlt	r3, [r4, #12]
 8003148:	bd10      	pop	{r4, pc}

0800314a <__swrite>:
 800314a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800314e:	461f      	mov	r7, r3
 8003150:	898b      	ldrh	r3, [r1, #12]
 8003152:	4605      	mov	r5, r0
 8003154:	05db      	lsls	r3, r3, #23
 8003156:	460c      	mov	r4, r1
 8003158:	4616      	mov	r6, r2
 800315a:	d505      	bpl.n	8003168 <__swrite+0x1e>
 800315c:	2302      	movs	r3, #2
 800315e:	2200      	movs	r2, #0
 8003160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003164:	f000 f8d0 	bl	8003308 <_lseek_r>
 8003168:	89a3      	ldrh	r3, [r4, #12]
 800316a:	4632      	mov	r2, r6
 800316c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003170:	81a3      	strh	r3, [r4, #12]
 8003172:	4628      	mov	r0, r5
 8003174:	463b      	mov	r3, r7
 8003176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800317a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800317e:	f000 b8e7 	b.w	8003350 <_write_r>

08003182 <__sseek>:
 8003182:	b510      	push	{r4, lr}
 8003184:	460c      	mov	r4, r1
 8003186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800318a:	f000 f8bd 	bl	8003308 <_lseek_r>
 800318e:	1c43      	adds	r3, r0, #1
 8003190:	89a3      	ldrh	r3, [r4, #12]
 8003192:	bf15      	itete	ne
 8003194:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003196:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800319a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800319e:	81a3      	strheq	r3, [r4, #12]
 80031a0:	bf18      	it	ne
 80031a2:	81a3      	strhne	r3, [r4, #12]
 80031a4:	bd10      	pop	{r4, pc}

080031a6 <__sclose>:
 80031a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031aa:	f000 b89d 	b.w	80032e8 <_close_r>

080031ae <__swbuf_r>:
 80031ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b0:	460e      	mov	r6, r1
 80031b2:	4614      	mov	r4, r2
 80031b4:	4605      	mov	r5, r0
 80031b6:	b118      	cbz	r0, 80031c0 <__swbuf_r+0x12>
 80031b8:	6a03      	ldr	r3, [r0, #32]
 80031ba:	b90b      	cbnz	r3, 80031c0 <__swbuf_r+0x12>
 80031bc:	f7ff ff0e 	bl	8002fdc <__sinit>
 80031c0:	69a3      	ldr	r3, [r4, #24]
 80031c2:	60a3      	str	r3, [r4, #8]
 80031c4:	89a3      	ldrh	r3, [r4, #12]
 80031c6:	071a      	lsls	r2, r3, #28
 80031c8:	d501      	bpl.n	80031ce <__swbuf_r+0x20>
 80031ca:	6923      	ldr	r3, [r4, #16]
 80031cc:	b943      	cbnz	r3, 80031e0 <__swbuf_r+0x32>
 80031ce:	4621      	mov	r1, r4
 80031d0:	4628      	mov	r0, r5
 80031d2:	f000 f82b 	bl	800322c <__swsetup_r>
 80031d6:	b118      	cbz	r0, 80031e0 <__swbuf_r+0x32>
 80031d8:	f04f 37ff 	mov.w	r7, #4294967295
 80031dc:	4638      	mov	r0, r7
 80031de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031e0:	6823      	ldr	r3, [r4, #0]
 80031e2:	6922      	ldr	r2, [r4, #16]
 80031e4:	b2f6      	uxtb	r6, r6
 80031e6:	1a98      	subs	r0, r3, r2
 80031e8:	6963      	ldr	r3, [r4, #20]
 80031ea:	4637      	mov	r7, r6
 80031ec:	4283      	cmp	r3, r0
 80031ee:	dc05      	bgt.n	80031fc <__swbuf_r+0x4e>
 80031f0:	4621      	mov	r1, r4
 80031f2:	4628      	mov	r0, r5
 80031f4:	f000 fd32 	bl	8003c5c <_fflush_r>
 80031f8:	2800      	cmp	r0, #0
 80031fa:	d1ed      	bne.n	80031d8 <__swbuf_r+0x2a>
 80031fc:	68a3      	ldr	r3, [r4, #8]
 80031fe:	3b01      	subs	r3, #1
 8003200:	60a3      	str	r3, [r4, #8]
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	6022      	str	r2, [r4, #0]
 8003208:	701e      	strb	r6, [r3, #0]
 800320a:	6962      	ldr	r2, [r4, #20]
 800320c:	1c43      	adds	r3, r0, #1
 800320e:	429a      	cmp	r2, r3
 8003210:	d004      	beq.n	800321c <__swbuf_r+0x6e>
 8003212:	89a3      	ldrh	r3, [r4, #12]
 8003214:	07db      	lsls	r3, r3, #31
 8003216:	d5e1      	bpl.n	80031dc <__swbuf_r+0x2e>
 8003218:	2e0a      	cmp	r6, #10
 800321a:	d1df      	bne.n	80031dc <__swbuf_r+0x2e>
 800321c:	4621      	mov	r1, r4
 800321e:	4628      	mov	r0, r5
 8003220:	f000 fd1c 	bl	8003c5c <_fflush_r>
 8003224:	2800      	cmp	r0, #0
 8003226:	d0d9      	beq.n	80031dc <__swbuf_r+0x2e>
 8003228:	e7d6      	b.n	80031d8 <__swbuf_r+0x2a>
	...

0800322c <__swsetup_r>:
 800322c:	b538      	push	{r3, r4, r5, lr}
 800322e:	4b29      	ldr	r3, [pc, #164]	@ (80032d4 <__swsetup_r+0xa8>)
 8003230:	4605      	mov	r5, r0
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	460c      	mov	r4, r1
 8003236:	b118      	cbz	r0, 8003240 <__swsetup_r+0x14>
 8003238:	6a03      	ldr	r3, [r0, #32]
 800323a:	b90b      	cbnz	r3, 8003240 <__swsetup_r+0x14>
 800323c:	f7ff fece 	bl	8002fdc <__sinit>
 8003240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003244:	0719      	lsls	r1, r3, #28
 8003246:	d422      	bmi.n	800328e <__swsetup_r+0x62>
 8003248:	06da      	lsls	r2, r3, #27
 800324a:	d407      	bmi.n	800325c <__swsetup_r+0x30>
 800324c:	2209      	movs	r2, #9
 800324e:	602a      	str	r2, [r5, #0]
 8003250:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003254:	f04f 30ff 	mov.w	r0, #4294967295
 8003258:	81a3      	strh	r3, [r4, #12]
 800325a:	e033      	b.n	80032c4 <__swsetup_r+0x98>
 800325c:	0758      	lsls	r0, r3, #29
 800325e:	d512      	bpl.n	8003286 <__swsetup_r+0x5a>
 8003260:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003262:	b141      	cbz	r1, 8003276 <__swsetup_r+0x4a>
 8003264:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003268:	4299      	cmp	r1, r3
 800326a:	d002      	beq.n	8003272 <__swsetup_r+0x46>
 800326c:	4628      	mov	r0, r5
 800326e:	f000 f8af 	bl	80033d0 <_free_r>
 8003272:	2300      	movs	r3, #0
 8003274:	6363      	str	r3, [r4, #52]	@ 0x34
 8003276:	89a3      	ldrh	r3, [r4, #12]
 8003278:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800327c:	81a3      	strh	r3, [r4, #12]
 800327e:	2300      	movs	r3, #0
 8003280:	6063      	str	r3, [r4, #4]
 8003282:	6923      	ldr	r3, [r4, #16]
 8003284:	6023      	str	r3, [r4, #0]
 8003286:	89a3      	ldrh	r3, [r4, #12]
 8003288:	f043 0308 	orr.w	r3, r3, #8
 800328c:	81a3      	strh	r3, [r4, #12]
 800328e:	6923      	ldr	r3, [r4, #16]
 8003290:	b94b      	cbnz	r3, 80032a6 <__swsetup_r+0x7a>
 8003292:	89a3      	ldrh	r3, [r4, #12]
 8003294:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800329c:	d003      	beq.n	80032a6 <__swsetup_r+0x7a>
 800329e:	4621      	mov	r1, r4
 80032a0:	4628      	mov	r0, r5
 80032a2:	f000 fd28 	bl	8003cf6 <__smakebuf_r>
 80032a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032aa:	f013 0201 	ands.w	r2, r3, #1
 80032ae:	d00a      	beq.n	80032c6 <__swsetup_r+0x9a>
 80032b0:	2200      	movs	r2, #0
 80032b2:	60a2      	str	r2, [r4, #8]
 80032b4:	6962      	ldr	r2, [r4, #20]
 80032b6:	4252      	negs	r2, r2
 80032b8:	61a2      	str	r2, [r4, #24]
 80032ba:	6922      	ldr	r2, [r4, #16]
 80032bc:	b942      	cbnz	r2, 80032d0 <__swsetup_r+0xa4>
 80032be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80032c2:	d1c5      	bne.n	8003250 <__swsetup_r+0x24>
 80032c4:	bd38      	pop	{r3, r4, r5, pc}
 80032c6:	0799      	lsls	r1, r3, #30
 80032c8:	bf58      	it	pl
 80032ca:	6962      	ldrpl	r2, [r4, #20]
 80032cc:	60a2      	str	r2, [r4, #8]
 80032ce:	e7f4      	b.n	80032ba <__swsetup_r+0x8e>
 80032d0:	2000      	movs	r0, #0
 80032d2:	e7f7      	b.n	80032c4 <__swsetup_r+0x98>
 80032d4:	20000018 	.word	0x20000018

080032d8 <memset>:
 80032d8:	4603      	mov	r3, r0
 80032da:	4402      	add	r2, r0
 80032dc:	4293      	cmp	r3, r2
 80032de:	d100      	bne.n	80032e2 <memset+0xa>
 80032e0:	4770      	bx	lr
 80032e2:	f803 1b01 	strb.w	r1, [r3], #1
 80032e6:	e7f9      	b.n	80032dc <memset+0x4>

080032e8 <_close_r>:
 80032e8:	b538      	push	{r3, r4, r5, lr}
 80032ea:	2300      	movs	r3, #0
 80032ec:	4d05      	ldr	r5, [pc, #20]	@ (8003304 <_close_r+0x1c>)
 80032ee:	4604      	mov	r4, r0
 80032f0:	4608      	mov	r0, r1
 80032f2:	602b      	str	r3, [r5, #0]
 80032f4:	f7fd fbed 	bl	8000ad2 <_close>
 80032f8:	1c43      	adds	r3, r0, #1
 80032fa:	d102      	bne.n	8003302 <_close_r+0x1a>
 80032fc:	682b      	ldr	r3, [r5, #0]
 80032fe:	b103      	cbz	r3, 8003302 <_close_r+0x1a>
 8003300:	6023      	str	r3, [r4, #0]
 8003302:	bd38      	pop	{r3, r4, r5, pc}
 8003304:	20000314 	.word	0x20000314

08003308 <_lseek_r>:
 8003308:	b538      	push	{r3, r4, r5, lr}
 800330a:	4604      	mov	r4, r0
 800330c:	4608      	mov	r0, r1
 800330e:	4611      	mov	r1, r2
 8003310:	2200      	movs	r2, #0
 8003312:	4d05      	ldr	r5, [pc, #20]	@ (8003328 <_lseek_r+0x20>)
 8003314:	602a      	str	r2, [r5, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	f7fd fbff 	bl	8000b1a <_lseek>
 800331c:	1c43      	adds	r3, r0, #1
 800331e:	d102      	bne.n	8003326 <_lseek_r+0x1e>
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	b103      	cbz	r3, 8003326 <_lseek_r+0x1e>
 8003324:	6023      	str	r3, [r4, #0]
 8003326:	bd38      	pop	{r3, r4, r5, pc}
 8003328:	20000314 	.word	0x20000314

0800332c <_read_r>:
 800332c:	b538      	push	{r3, r4, r5, lr}
 800332e:	4604      	mov	r4, r0
 8003330:	4608      	mov	r0, r1
 8003332:	4611      	mov	r1, r2
 8003334:	2200      	movs	r2, #0
 8003336:	4d05      	ldr	r5, [pc, #20]	@ (800334c <_read_r+0x20>)
 8003338:	602a      	str	r2, [r5, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	f7fd fb90 	bl	8000a60 <_read>
 8003340:	1c43      	adds	r3, r0, #1
 8003342:	d102      	bne.n	800334a <_read_r+0x1e>
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	b103      	cbz	r3, 800334a <_read_r+0x1e>
 8003348:	6023      	str	r3, [r4, #0]
 800334a:	bd38      	pop	{r3, r4, r5, pc}
 800334c:	20000314 	.word	0x20000314

08003350 <_write_r>:
 8003350:	b538      	push	{r3, r4, r5, lr}
 8003352:	4604      	mov	r4, r0
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	2200      	movs	r2, #0
 800335a:	4d05      	ldr	r5, [pc, #20]	@ (8003370 <_write_r+0x20>)
 800335c:	602a      	str	r2, [r5, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	f7fd fb9b 	bl	8000a9a <_write>
 8003364:	1c43      	adds	r3, r0, #1
 8003366:	d102      	bne.n	800336e <_write_r+0x1e>
 8003368:	682b      	ldr	r3, [r5, #0]
 800336a:	b103      	cbz	r3, 800336e <_write_r+0x1e>
 800336c:	6023      	str	r3, [r4, #0]
 800336e:	bd38      	pop	{r3, r4, r5, pc}
 8003370:	20000314 	.word	0x20000314

08003374 <__errno>:
 8003374:	4b01      	ldr	r3, [pc, #4]	@ (800337c <__errno+0x8>)
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	20000018 	.word	0x20000018

08003380 <__libc_init_array>:
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	2600      	movs	r6, #0
 8003384:	4d0c      	ldr	r5, [pc, #48]	@ (80033b8 <__libc_init_array+0x38>)
 8003386:	4c0d      	ldr	r4, [pc, #52]	@ (80033bc <__libc_init_array+0x3c>)
 8003388:	1b64      	subs	r4, r4, r5
 800338a:	10a4      	asrs	r4, r4, #2
 800338c:	42a6      	cmp	r6, r4
 800338e:	d109      	bne.n	80033a4 <__libc_init_array+0x24>
 8003390:	f000 fd2e 	bl	8003df0 <_init>
 8003394:	2600      	movs	r6, #0
 8003396:	4d0a      	ldr	r5, [pc, #40]	@ (80033c0 <__libc_init_array+0x40>)
 8003398:	4c0a      	ldr	r4, [pc, #40]	@ (80033c4 <__libc_init_array+0x44>)
 800339a:	1b64      	subs	r4, r4, r5
 800339c:	10a4      	asrs	r4, r4, #2
 800339e:	42a6      	cmp	r6, r4
 80033a0:	d105      	bne.n	80033ae <__libc_init_array+0x2e>
 80033a2:	bd70      	pop	{r4, r5, r6, pc}
 80033a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033a8:	4798      	blx	r3
 80033aa:	3601      	adds	r6, #1
 80033ac:	e7ee      	b.n	800338c <__libc_init_array+0xc>
 80033ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b2:	4798      	blx	r3
 80033b4:	3601      	adds	r6, #1
 80033b6:	e7f2      	b.n	800339e <__libc_init_array+0x1e>
 80033b8:	08003ea8 	.word	0x08003ea8
 80033bc:	08003ea8 	.word	0x08003ea8
 80033c0:	08003ea8 	.word	0x08003ea8
 80033c4:	08003eac 	.word	0x08003eac

080033c8 <__retarget_lock_init_recursive>:
 80033c8:	4770      	bx	lr

080033ca <__retarget_lock_acquire_recursive>:
 80033ca:	4770      	bx	lr

080033cc <__retarget_lock_release_recursive>:
 80033cc:	4770      	bx	lr
	...

080033d0 <_free_r>:
 80033d0:	b538      	push	{r3, r4, r5, lr}
 80033d2:	4605      	mov	r5, r0
 80033d4:	2900      	cmp	r1, #0
 80033d6:	d040      	beq.n	800345a <_free_r+0x8a>
 80033d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033dc:	1f0c      	subs	r4, r1, #4
 80033de:	2b00      	cmp	r3, #0
 80033e0:	bfb8      	it	lt
 80033e2:	18e4      	addlt	r4, r4, r3
 80033e4:	f000 f8de 	bl	80035a4 <__malloc_lock>
 80033e8:	4a1c      	ldr	r2, [pc, #112]	@ (800345c <_free_r+0x8c>)
 80033ea:	6813      	ldr	r3, [r2, #0]
 80033ec:	b933      	cbnz	r3, 80033fc <_free_r+0x2c>
 80033ee:	6063      	str	r3, [r4, #4]
 80033f0:	6014      	str	r4, [r2, #0]
 80033f2:	4628      	mov	r0, r5
 80033f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033f8:	f000 b8da 	b.w	80035b0 <__malloc_unlock>
 80033fc:	42a3      	cmp	r3, r4
 80033fe:	d908      	bls.n	8003412 <_free_r+0x42>
 8003400:	6820      	ldr	r0, [r4, #0]
 8003402:	1821      	adds	r1, r4, r0
 8003404:	428b      	cmp	r3, r1
 8003406:	bf01      	itttt	eq
 8003408:	6819      	ldreq	r1, [r3, #0]
 800340a:	685b      	ldreq	r3, [r3, #4]
 800340c:	1809      	addeq	r1, r1, r0
 800340e:	6021      	streq	r1, [r4, #0]
 8003410:	e7ed      	b.n	80033ee <_free_r+0x1e>
 8003412:	461a      	mov	r2, r3
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	b10b      	cbz	r3, 800341c <_free_r+0x4c>
 8003418:	42a3      	cmp	r3, r4
 800341a:	d9fa      	bls.n	8003412 <_free_r+0x42>
 800341c:	6811      	ldr	r1, [r2, #0]
 800341e:	1850      	adds	r0, r2, r1
 8003420:	42a0      	cmp	r0, r4
 8003422:	d10b      	bne.n	800343c <_free_r+0x6c>
 8003424:	6820      	ldr	r0, [r4, #0]
 8003426:	4401      	add	r1, r0
 8003428:	1850      	adds	r0, r2, r1
 800342a:	4283      	cmp	r3, r0
 800342c:	6011      	str	r1, [r2, #0]
 800342e:	d1e0      	bne.n	80033f2 <_free_r+0x22>
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4408      	add	r0, r1
 8003436:	6010      	str	r0, [r2, #0]
 8003438:	6053      	str	r3, [r2, #4]
 800343a:	e7da      	b.n	80033f2 <_free_r+0x22>
 800343c:	d902      	bls.n	8003444 <_free_r+0x74>
 800343e:	230c      	movs	r3, #12
 8003440:	602b      	str	r3, [r5, #0]
 8003442:	e7d6      	b.n	80033f2 <_free_r+0x22>
 8003444:	6820      	ldr	r0, [r4, #0]
 8003446:	1821      	adds	r1, r4, r0
 8003448:	428b      	cmp	r3, r1
 800344a:	bf01      	itttt	eq
 800344c:	6819      	ldreq	r1, [r3, #0]
 800344e:	685b      	ldreq	r3, [r3, #4]
 8003450:	1809      	addeq	r1, r1, r0
 8003452:	6021      	streq	r1, [r4, #0]
 8003454:	6063      	str	r3, [r4, #4]
 8003456:	6054      	str	r4, [r2, #4]
 8003458:	e7cb      	b.n	80033f2 <_free_r+0x22>
 800345a:	bd38      	pop	{r3, r4, r5, pc}
 800345c:	20000320 	.word	0x20000320

08003460 <sbrk_aligned>:
 8003460:	b570      	push	{r4, r5, r6, lr}
 8003462:	4e0f      	ldr	r6, [pc, #60]	@ (80034a0 <sbrk_aligned+0x40>)
 8003464:	460c      	mov	r4, r1
 8003466:	6831      	ldr	r1, [r6, #0]
 8003468:	4605      	mov	r5, r0
 800346a:	b911      	cbnz	r1, 8003472 <sbrk_aligned+0x12>
 800346c:	f000 fca2 	bl	8003db4 <_sbrk_r>
 8003470:	6030      	str	r0, [r6, #0]
 8003472:	4621      	mov	r1, r4
 8003474:	4628      	mov	r0, r5
 8003476:	f000 fc9d 	bl	8003db4 <_sbrk_r>
 800347a:	1c43      	adds	r3, r0, #1
 800347c:	d103      	bne.n	8003486 <sbrk_aligned+0x26>
 800347e:	f04f 34ff 	mov.w	r4, #4294967295
 8003482:	4620      	mov	r0, r4
 8003484:	bd70      	pop	{r4, r5, r6, pc}
 8003486:	1cc4      	adds	r4, r0, #3
 8003488:	f024 0403 	bic.w	r4, r4, #3
 800348c:	42a0      	cmp	r0, r4
 800348e:	d0f8      	beq.n	8003482 <sbrk_aligned+0x22>
 8003490:	1a21      	subs	r1, r4, r0
 8003492:	4628      	mov	r0, r5
 8003494:	f000 fc8e 	bl	8003db4 <_sbrk_r>
 8003498:	3001      	adds	r0, #1
 800349a:	d1f2      	bne.n	8003482 <sbrk_aligned+0x22>
 800349c:	e7ef      	b.n	800347e <sbrk_aligned+0x1e>
 800349e:	bf00      	nop
 80034a0:	2000031c 	.word	0x2000031c

080034a4 <_malloc_r>:
 80034a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034a8:	1ccd      	adds	r5, r1, #3
 80034aa:	f025 0503 	bic.w	r5, r5, #3
 80034ae:	3508      	adds	r5, #8
 80034b0:	2d0c      	cmp	r5, #12
 80034b2:	bf38      	it	cc
 80034b4:	250c      	movcc	r5, #12
 80034b6:	2d00      	cmp	r5, #0
 80034b8:	4606      	mov	r6, r0
 80034ba:	db01      	blt.n	80034c0 <_malloc_r+0x1c>
 80034bc:	42a9      	cmp	r1, r5
 80034be:	d904      	bls.n	80034ca <_malloc_r+0x26>
 80034c0:	230c      	movs	r3, #12
 80034c2:	6033      	str	r3, [r6, #0]
 80034c4:	2000      	movs	r0, #0
 80034c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035a0 <_malloc_r+0xfc>
 80034ce:	f000 f869 	bl	80035a4 <__malloc_lock>
 80034d2:	f8d8 3000 	ldr.w	r3, [r8]
 80034d6:	461c      	mov	r4, r3
 80034d8:	bb44      	cbnz	r4, 800352c <_malloc_r+0x88>
 80034da:	4629      	mov	r1, r5
 80034dc:	4630      	mov	r0, r6
 80034de:	f7ff ffbf 	bl	8003460 <sbrk_aligned>
 80034e2:	1c43      	adds	r3, r0, #1
 80034e4:	4604      	mov	r4, r0
 80034e6:	d158      	bne.n	800359a <_malloc_r+0xf6>
 80034e8:	f8d8 4000 	ldr.w	r4, [r8]
 80034ec:	4627      	mov	r7, r4
 80034ee:	2f00      	cmp	r7, #0
 80034f0:	d143      	bne.n	800357a <_malloc_r+0xd6>
 80034f2:	2c00      	cmp	r4, #0
 80034f4:	d04b      	beq.n	800358e <_malloc_r+0xea>
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	4639      	mov	r1, r7
 80034fa:	4630      	mov	r0, r6
 80034fc:	eb04 0903 	add.w	r9, r4, r3
 8003500:	f000 fc58 	bl	8003db4 <_sbrk_r>
 8003504:	4581      	cmp	r9, r0
 8003506:	d142      	bne.n	800358e <_malloc_r+0xea>
 8003508:	6821      	ldr	r1, [r4, #0]
 800350a:	4630      	mov	r0, r6
 800350c:	1a6d      	subs	r5, r5, r1
 800350e:	4629      	mov	r1, r5
 8003510:	f7ff ffa6 	bl	8003460 <sbrk_aligned>
 8003514:	3001      	adds	r0, #1
 8003516:	d03a      	beq.n	800358e <_malloc_r+0xea>
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	442b      	add	r3, r5
 800351c:	6023      	str	r3, [r4, #0]
 800351e:	f8d8 3000 	ldr.w	r3, [r8]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	bb62      	cbnz	r2, 8003580 <_malloc_r+0xdc>
 8003526:	f8c8 7000 	str.w	r7, [r8]
 800352a:	e00f      	b.n	800354c <_malloc_r+0xa8>
 800352c:	6822      	ldr	r2, [r4, #0]
 800352e:	1b52      	subs	r2, r2, r5
 8003530:	d420      	bmi.n	8003574 <_malloc_r+0xd0>
 8003532:	2a0b      	cmp	r2, #11
 8003534:	d917      	bls.n	8003566 <_malloc_r+0xc2>
 8003536:	1961      	adds	r1, r4, r5
 8003538:	42a3      	cmp	r3, r4
 800353a:	6025      	str	r5, [r4, #0]
 800353c:	bf18      	it	ne
 800353e:	6059      	strne	r1, [r3, #4]
 8003540:	6863      	ldr	r3, [r4, #4]
 8003542:	bf08      	it	eq
 8003544:	f8c8 1000 	streq.w	r1, [r8]
 8003548:	5162      	str	r2, [r4, r5]
 800354a:	604b      	str	r3, [r1, #4]
 800354c:	4630      	mov	r0, r6
 800354e:	f000 f82f 	bl	80035b0 <__malloc_unlock>
 8003552:	f104 000b 	add.w	r0, r4, #11
 8003556:	1d23      	adds	r3, r4, #4
 8003558:	f020 0007 	bic.w	r0, r0, #7
 800355c:	1ac2      	subs	r2, r0, r3
 800355e:	bf1c      	itt	ne
 8003560:	1a1b      	subne	r3, r3, r0
 8003562:	50a3      	strne	r3, [r4, r2]
 8003564:	e7af      	b.n	80034c6 <_malloc_r+0x22>
 8003566:	6862      	ldr	r2, [r4, #4]
 8003568:	42a3      	cmp	r3, r4
 800356a:	bf0c      	ite	eq
 800356c:	f8c8 2000 	streq.w	r2, [r8]
 8003570:	605a      	strne	r2, [r3, #4]
 8003572:	e7eb      	b.n	800354c <_malloc_r+0xa8>
 8003574:	4623      	mov	r3, r4
 8003576:	6864      	ldr	r4, [r4, #4]
 8003578:	e7ae      	b.n	80034d8 <_malloc_r+0x34>
 800357a:	463c      	mov	r4, r7
 800357c:	687f      	ldr	r7, [r7, #4]
 800357e:	e7b6      	b.n	80034ee <_malloc_r+0x4a>
 8003580:	461a      	mov	r2, r3
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	42a3      	cmp	r3, r4
 8003586:	d1fb      	bne.n	8003580 <_malloc_r+0xdc>
 8003588:	2300      	movs	r3, #0
 800358a:	6053      	str	r3, [r2, #4]
 800358c:	e7de      	b.n	800354c <_malloc_r+0xa8>
 800358e:	230c      	movs	r3, #12
 8003590:	4630      	mov	r0, r6
 8003592:	6033      	str	r3, [r6, #0]
 8003594:	f000 f80c 	bl	80035b0 <__malloc_unlock>
 8003598:	e794      	b.n	80034c4 <_malloc_r+0x20>
 800359a:	6005      	str	r5, [r0, #0]
 800359c:	e7d6      	b.n	800354c <_malloc_r+0xa8>
 800359e:	bf00      	nop
 80035a0:	20000320 	.word	0x20000320

080035a4 <__malloc_lock>:
 80035a4:	4801      	ldr	r0, [pc, #4]	@ (80035ac <__malloc_lock+0x8>)
 80035a6:	f7ff bf10 	b.w	80033ca <__retarget_lock_acquire_recursive>
 80035aa:	bf00      	nop
 80035ac:	20000318 	.word	0x20000318

080035b0 <__malloc_unlock>:
 80035b0:	4801      	ldr	r0, [pc, #4]	@ (80035b8 <__malloc_unlock+0x8>)
 80035b2:	f7ff bf0b 	b.w	80033cc <__retarget_lock_release_recursive>
 80035b6:	bf00      	nop
 80035b8:	20000318 	.word	0x20000318

080035bc <__sfputc_r>:
 80035bc:	6893      	ldr	r3, [r2, #8]
 80035be:	b410      	push	{r4}
 80035c0:	3b01      	subs	r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	6093      	str	r3, [r2, #8]
 80035c6:	da07      	bge.n	80035d8 <__sfputc_r+0x1c>
 80035c8:	6994      	ldr	r4, [r2, #24]
 80035ca:	42a3      	cmp	r3, r4
 80035cc:	db01      	blt.n	80035d2 <__sfputc_r+0x16>
 80035ce:	290a      	cmp	r1, #10
 80035d0:	d102      	bne.n	80035d8 <__sfputc_r+0x1c>
 80035d2:	bc10      	pop	{r4}
 80035d4:	f7ff bdeb 	b.w	80031ae <__swbuf_r>
 80035d8:	6813      	ldr	r3, [r2, #0]
 80035da:	1c58      	adds	r0, r3, #1
 80035dc:	6010      	str	r0, [r2, #0]
 80035de:	7019      	strb	r1, [r3, #0]
 80035e0:	4608      	mov	r0, r1
 80035e2:	bc10      	pop	{r4}
 80035e4:	4770      	bx	lr

080035e6 <__sfputs_r>:
 80035e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e8:	4606      	mov	r6, r0
 80035ea:	460f      	mov	r7, r1
 80035ec:	4614      	mov	r4, r2
 80035ee:	18d5      	adds	r5, r2, r3
 80035f0:	42ac      	cmp	r4, r5
 80035f2:	d101      	bne.n	80035f8 <__sfputs_r+0x12>
 80035f4:	2000      	movs	r0, #0
 80035f6:	e007      	b.n	8003608 <__sfputs_r+0x22>
 80035f8:	463a      	mov	r2, r7
 80035fa:	4630      	mov	r0, r6
 80035fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003600:	f7ff ffdc 	bl	80035bc <__sfputc_r>
 8003604:	1c43      	adds	r3, r0, #1
 8003606:	d1f3      	bne.n	80035f0 <__sfputs_r+0xa>
 8003608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800360c <_vfiprintf_r>:
 800360c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003610:	460d      	mov	r5, r1
 8003612:	4614      	mov	r4, r2
 8003614:	4698      	mov	r8, r3
 8003616:	4606      	mov	r6, r0
 8003618:	b09d      	sub	sp, #116	@ 0x74
 800361a:	b118      	cbz	r0, 8003624 <_vfiprintf_r+0x18>
 800361c:	6a03      	ldr	r3, [r0, #32]
 800361e:	b90b      	cbnz	r3, 8003624 <_vfiprintf_r+0x18>
 8003620:	f7ff fcdc 	bl	8002fdc <__sinit>
 8003624:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003626:	07d9      	lsls	r1, r3, #31
 8003628:	d405      	bmi.n	8003636 <_vfiprintf_r+0x2a>
 800362a:	89ab      	ldrh	r3, [r5, #12]
 800362c:	059a      	lsls	r2, r3, #22
 800362e:	d402      	bmi.n	8003636 <_vfiprintf_r+0x2a>
 8003630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003632:	f7ff feca 	bl	80033ca <__retarget_lock_acquire_recursive>
 8003636:	89ab      	ldrh	r3, [r5, #12]
 8003638:	071b      	lsls	r3, r3, #28
 800363a:	d501      	bpl.n	8003640 <_vfiprintf_r+0x34>
 800363c:	692b      	ldr	r3, [r5, #16]
 800363e:	b99b      	cbnz	r3, 8003668 <_vfiprintf_r+0x5c>
 8003640:	4629      	mov	r1, r5
 8003642:	4630      	mov	r0, r6
 8003644:	f7ff fdf2 	bl	800322c <__swsetup_r>
 8003648:	b170      	cbz	r0, 8003668 <_vfiprintf_r+0x5c>
 800364a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800364c:	07dc      	lsls	r4, r3, #31
 800364e:	d504      	bpl.n	800365a <_vfiprintf_r+0x4e>
 8003650:	f04f 30ff 	mov.w	r0, #4294967295
 8003654:	b01d      	add	sp, #116	@ 0x74
 8003656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800365a:	89ab      	ldrh	r3, [r5, #12]
 800365c:	0598      	lsls	r0, r3, #22
 800365e:	d4f7      	bmi.n	8003650 <_vfiprintf_r+0x44>
 8003660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003662:	f7ff feb3 	bl	80033cc <__retarget_lock_release_recursive>
 8003666:	e7f3      	b.n	8003650 <_vfiprintf_r+0x44>
 8003668:	2300      	movs	r3, #0
 800366a:	9309      	str	r3, [sp, #36]	@ 0x24
 800366c:	2320      	movs	r3, #32
 800366e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003672:	2330      	movs	r3, #48	@ 0x30
 8003674:	f04f 0901 	mov.w	r9, #1
 8003678:	f8cd 800c 	str.w	r8, [sp, #12]
 800367c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003828 <_vfiprintf_r+0x21c>
 8003680:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003684:	4623      	mov	r3, r4
 8003686:	469a      	mov	sl, r3
 8003688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800368c:	b10a      	cbz	r2, 8003692 <_vfiprintf_r+0x86>
 800368e:	2a25      	cmp	r2, #37	@ 0x25
 8003690:	d1f9      	bne.n	8003686 <_vfiprintf_r+0x7a>
 8003692:	ebba 0b04 	subs.w	fp, sl, r4
 8003696:	d00b      	beq.n	80036b0 <_vfiprintf_r+0xa4>
 8003698:	465b      	mov	r3, fp
 800369a:	4622      	mov	r2, r4
 800369c:	4629      	mov	r1, r5
 800369e:	4630      	mov	r0, r6
 80036a0:	f7ff ffa1 	bl	80035e6 <__sfputs_r>
 80036a4:	3001      	adds	r0, #1
 80036a6:	f000 80a7 	beq.w	80037f8 <_vfiprintf_r+0x1ec>
 80036aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036ac:	445a      	add	r2, fp
 80036ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80036b0:	f89a 3000 	ldrb.w	r3, [sl]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 809f 	beq.w	80037f8 <_vfiprintf_r+0x1ec>
 80036ba:	2300      	movs	r3, #0
 80036bc:	f04f 32ff 	mov.w	r2, #4294967295
 80036c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036c4:	f10a 0a01 	add.w	sl, sl, #1
 80036c8:	9304      	str	r3, [sp, #16]
 80036ca:	9307      	str	r3, [sp, #28]
 80036cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80036d2:	4654      	mov	r4, sl
 80036d4:	2205      	movs	r2, #5
 80036d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036da:	4853      	ldr	r0, [pc, #332]	@ (8003828 <_vfiprintf_r+0x21c>)
 80036dc:	f000 fb7a 	bl	8003dd4 <memchr>
 80036e0:	9a04      	ldr	r2, [sp, #16]
 80036e2:	b9d8      	cbnz	r0, 800371c <_vfiprintf_r+0x110>
 80036e4:	06d1      	lsls	r1, r2, #27
 80036e6:	bf44      	itt	mi
 80036e8:	2320      	movmi	r3, #32
 80036ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036ee:	0713      	lsls	r3, r2, #28
 80036f0:	bf44      	itt	mi
 80036f2:	232b      	movmi	r3, #43	@ 0x2b
 80036f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036f8:	f89a 3000 	ldrb.w	r3, [sl]
 80036fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80036fe:	d015      	beq.n	800372c <_vfiprintf_r+0x120>
 8003700:	4654      	mov	r4, sl
 8003702:	2000      	movs	r0, #0
 8003704:	f04f 0c0a 	mov.w	ip, #10
 8003708:	9a07      	ldr	r2, [sp, #28]
 800370a:	4621      	mov	r1, r4
 800370c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003710:	3b30      	subs	r3, #48	@ 0x30
 8003712:	2b09      	cmp	r3, #9
 8003714:	d94b      	bls.n	80037ae <_vfiprintf_r+0x1a2>
 8003716:	b1b0      	cbz	r0, 8003746 <_vfiprintf_r+0x13a>
 8003718:	9207      	str	r2, [sp, #28]
 800371a:	e014      	b.n	8003746 <_vfiprintf_r+0x13a>
 800371c:	eba0 0308 	sub.w	r3, r0, r8
 8003720:	fa09 f303 	lsl.w	r3, r9, r3
 8003724:	4313      	orrs	r3, r2
 8003726:	46a2      	mov	sl, r4
 8003728:	9304      	str	r3, [sp, #16]
 800372a:	e7d2      	b.n	80036d2 <_vfiprintf_r+0xc6>
 800372c:	9b03      	ldr	r3, [sp, #12]
 800372e:	1d19      	adds	r1, r3, #4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	9103      	str	r1, [sp, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	bfbb      	ittet	lt
 8003738:	425b      	neglt	r3, r3
 800373a:	f042 0202 	orrlt.w	r2, r2, #2
 800373e:	9307      	strge	r3, [sp, #28]
 8003740:	9307      	strlt	r3, [sp, #28]
 8003742:	bfb8      	it	lt
 8003744:	9204      	strlt	r2, [sp, #16]
 8003746:	7823      	ldrb	r3, [r4, #0]
 8003748:	2b2e      	cmp	r3, #46	@ 0x2e
 800374a:	d10a      	bne.n	8003762 <_vfiprintf_r+0x156>
 800374c:	7863      	ldrb	r3, [r4, #1]
 800374e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003750:	d132      	bne.n	80037b8 <_vfiprintf_r+0x1ac>
 8003752:	9b03      	ldr	r3, [sp, #12]
 8003754:	3402      	adds	r4, #2
 8003756:	1d1a      	adds	r2, r3, #4
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	9203      	str	r2, [sp, #12]
 800375c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003760:	9305      	str	r3, [sp, #20]
 8003762:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800382c <_vfiprintf_r+0x220>
 8003766:	2203      	movs	r2, #3
 8003768:	4650      	mov	r0, sl
 800376a:	7821      	ldrb	r1, [r4, #0]
 800376c:	f000 fb32 	bl	8003dd4 <memchr>
 8003770:	b138      	cbz	r0, 8003782 <_vfiprintf_r+0x176>
 8003772:	2240      	movs	r2, #64	@ 0x40
 8003774:	9b04      	ldr	r3, [sp, #16]
 8003776:	eba0 000a 	sub.w	r0, r0, sl
 800377a:	4082      	lsls	r2, r0
 800377c:	4313      	orrs	r3, r2
 800377e:	3401      	adds	r4, #1
 8003780:	9304      	str	r3, [sp, #16]
 8003782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003786:	2206      	movs	r2, #6
 8003788:	4829      	ldr	r0, [pc, #164]	@ (8003830 <_vfiprintf_r+0x224>)
 800378a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800378e:	f000 fb21 	bl	8003dd4 <memchr>
 8003792:	2800      	cmp	r0, #0
 8003794:	d03f      	beq.n	8003816 <_vfiprintf_r+0x20a>
 8003796:	4b27      	ldr	r3, [pc, #156]	@ (8003834 <_vfiprintf_r+0x228>)
 8003798:	bb1b      	cbnz	r3, 80037e2 <_vfiprintf_r+0x1d6>
 800379a:	9b03      	ldr	r3, [sp, #12]
 800379c:	3307      	adds	r3, #7
 800379e:	f023 0307 	bic.w	r3, r3, #7
 80037a2:	3308      	adds	r3, #8
 80037a4:	9303      	str	r3, [sp, #12]
 80037a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037a8:	443b      	add	r3, r7
 80037aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80037ac:	e76a      	b.n	8003684 <_vfiprintf_r+0x78>
 80037ae:	460c      	mov	r4, r1
 80037b0:	2001      	movs	r0, #1
 80037b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80037b6:	e7a8      	b.n	800370a <_vfiprintf_r+0xfe>
 80037b8:	2300      	movs	r3, #0
 80037ba:	f04f 0c0a 	mov.w	ip, #10
 80037be:	4619      	mov	r1, r3
 80037c0:	3401      	adds	r4, #1
 80037c2:	9305      	str	r3, [sp, #20]
 80037c4:	4620      	mov	r0, r4
 80037c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037ca:	3a30      	subs	r2, #48	@ 0x30
 80037cc:	2a09      	cmp	r2, #9
 80037ce:	d903      	bls.n	80037d8 <_vfiprintf_r+0x1cc>
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0c6      	beq.n	8003762 <_vfiprintf_r+0x156>
 80037d4:	9105      	str	r1, [sp, #20]
 80037d6:	e7c4      	b.n	8003762 <_vfiprintf_r+0x156>
 80037d8:	4604      	mov	r4, r0
 80037da:	2301      	movs	r3, #1
 80037dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80037e0:	e7f0      	b.n	80037c4 <_vfiprintf_r+0x1b8>
 80037e2:	ab03      	add	r3, sp, #12
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	462a      	mov	r2, r5
 80037e8:	4630      	mov	r0, r6
 80037ea:	4b13      	ldr	r3, [pc, #76]	@ (8003838 <_vfiprintf_r+0x22c>)
 80037ec:	a904      	add	r1, sp, #16
 80037ee:	f3af 8000 	nop.w
 80037f2:	4607      	mov	r7, r0
 80037f4:	1c78      	adds	r0, r7, #1
 80037f6:	d1d6      	bne.n	80037a6 <_vfiprintf_r+0x19a>
 80037f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80037fa:	07d9      	lsls	r1, r3, #31
 80037fc:	d405      	bmi.n	800380a <_vfiprintf_r+0x1fe>
 80037fe:	89ab      	ldrh	r3, [r5, #12]
 8003800:	059a      	lsls	r2, r3, #22
 8003802:	d402      	bmi.n	800380a <_vfiprintf_r+0x1fe>
 8003804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003806:	f7ff fde1 	bl	80033cc <__retarget_lock_release_recursive>
 800380a:	89ab      	ldrh	r3, [r5, #12]
 800380c:	065b      	lsls	r3, r3, #25
 800380e:	f53f af1f 	bmi.w	8003650 <_vfiprintf_r+0x44>
 8003812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003814:	e71e      	b.n	8003654 <_vfiprintf_r+0x48>
 8003816:	ab03      	add	r3, sp, #12
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	462a      	mov	r2, r5
 800381c:	4630      	mov	r0, r6
 800381e:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <_vfiprintf_r+0x22c>)
 8003820:	a904      	add	r1, sp, #16
 8003822:	f000 f87d 	bl	8003920 <_printf_i>
 8003826:	e7e4      	b.n	80037f2 <_vfiprintf_r+0x1e6>
 8003828:	08003e72 	.word	0x08003e72
 800382c:	08003e78 	.word	0x08003e78
 8003830:	08003e7c 	.word	0x08003e7c
 8003834:	00000000 	.word	0x00000000
 8003838:	080035e7 	.word	0x080035e7

0800383c <_printf_common>:
 800383c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003840:	4616      	mov	r6, r2
 8003842:	4698      	mov	r8, r3
 8003844:	688a      	ldr	r2, [r1, #8]
 8003846:	690b      	ldr	r3, [r1, #16]
 8003848:	4607      	mov	r7, r0
 800384a:	4293      	cmp	r3, r2
 800384c:	bfb8      	it	lt
 800384e:	4613      	movlt	r3, r2
 8003850:	6033      	str	r3, [r6, #0]
 8003852:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003856:	460c      	mov	r4, r1
 8003858:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800385c:	b10a      	cbz	r2, 8003862 <_printf_common+0x26>
 800385e:	3301      	adds	r3, #1
 8003860:	6033      	str	r3, [r6, #0]
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	0699      	lsls	r1, r3, #26
 8003866:	bf42      	ittt	mi
 8003868:	6833      	ldrmi	r3, [r6, #0]
 800386a:	3302      	addmi	r3, #2
 800386c:	6033      	strmi	r3, [r6, #0]
 800386e:	6825      	ldr	r5, [r4, #0]
 8003870:	f015 0506 	ands.w	r5, r5, #6
 8003874:	d106      	bne.n	8003884 <_printf_common+0x48>
 8003876:	f104 0a19 	add.w	sl, r4, #25
 800387a:	68e3      	ldr	r3, [r4, #12]
 800387c:	6832      	ldr	r2, [r6, #0]
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	42ab      	cmp	r3, r5
 8003882:	dc2b      	bgt.n	80038dc <_printf_common+0xa0>
 8003884:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003888:	6822      	ldr	r2, [r4, #0]
 800388a:	3b00      	subs	r3, #0
 800388c:	bf18      	it	ne
 800388e:	2301      	movne	r3, #1
 8003890:	0692      	lsls	r2, r2, #26
 8003892:	d430      	bmi.n	80038f6 <_printf_common+0xba>
 8003894:	4641      	mov	r1, r8
 8003896:	4638      	mov	r0, r7
 8003898:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800389c:	47c8      	blx	r9
 800389e:	3001      	adds	r0, #1
 80038a0:	d023      	beq.n	80038ea <_printf_common+0xae>
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	6922      	ldr	r2, [r4, #16]
 80038a6:	f003 0306 	and.w	r3, r3, #6
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	bf14      	ite	ne
 80038ae:	2500      	movne	r5, #0
 80038b0:	6833      	ldreq	r3, [r6, #0]
 80038b2:	f04f 0600 	mov.w	r6, #0
 80038b6:	bf08      	it	eq
 80038b8:	68e5      	ldreq	r5, [r4, #12]
 80038ba:	f104 041a 	add.w	r4, r4, #26
 80038be:	bf08      	it	eq
 80038c0:	1aed      	subeq	r5, r5, r3
 80038c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80038c6:	bf08      	it	eq
 80038c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038cc:	4293      	cmp	r3, r2
 80038ce:	bfc4      	itt	gt
 80038d0:	1a9b      	subgt	r3, r3, r2
 80038d2:	18ed      	addgt	r5, r5, r3
 80038d4:	42b5      	cmp	r5, r6
 80038d6:	d11a      	bne.n	800390e <_printf_common+0xd2>
 80038d8:	2000      	movs	r0, #0
 80038da:	e008      	b.n	80038ee <_printf_common+0xb2>
 80038dc:	2301      	movs	r3, #1
 80038de:	4652      	mov	r2, sl
 80038e0:	4641      	mov	r1, r8
 80038e2:	4638      	mov	r0, r7
 80038e4:	47c8      	blx	r9
 80038e6:	3001      	adds	r0, #1
 80038e8:	d103      	bne.n	80038f2 <_printf_common+0xb6>
 80038ea:	f04f 30ff 	mov.w	r0, #4294967295
 80038ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f2:	3501      	adds	r5, #1
 80038f4:	e7c1      	b.n	800387a <_printf_common+0x3e>
 80038f6:	2030      	movs	r0, #48	@ 0x30
 80038f8:	18e1      	adds	r1, r4, r3
 80038fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003904:	4422      	add	r2, r4
 8003906:	3302      	adds	r3, #2
 8003908:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800390c:	e7c2      	b.n	8003894 <_printf_common+0x58>
 800390e:	2301      	movs	r3, #1
 8003910:	4622      	mov	r2, r4
 8003912:	4641      	mov	r1, r8
 8003914:	4638      	mov	r0, r7
 8003916:	47c8      	blx	r9
 8003918:	3001      	adds	r0, #1
 800391a:	d0e6      	beq.n	80038ea <_printf_common+0xae>
 800391c:	3601      	adds	r6, #1
 800391e:	e7d9      	b.n	80038d4 <_printf_common+0x98>

08003920 <_printf_i>:
 8003920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003924:	7e0f      	ldrb	r7, [r1, #24]
 8003926:	4691      	mov	r9, r2
 8003928:	2f78      	cmp	r7, #120	@ 0x78
 800392a:	4680      	mov	r8, r0
 800392c:	460c      	mov	r4, r1
 800392e:	469a      	mov	sl, r3
 8003930:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003932:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003936:	d807      	bhi.n	8003948 <_printf_i+0x28>
 8003938:	2f62      	cmp	r7, #98	@ 0x62
 800393a:	d80a      	bhi.n	8003952 <_printf_i+0x32>
 800393c:	2f00      	cmp	r7, #0
 800393e:	f000 80d1 	beq.w	8003ae4 <_printf_i+0x1c4>
 8003942:	2f58      	cmp	r7, #88	@ 0x58
 8003944:	f000 80b8 	beq.w	8003ab8 <_printf_i+0x198>
 8003948:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800394c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003950:	e03a      	b.n	80039c8 <_printf_i+0xa8>
 8003952:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003956:	2b15      	cmp	r3, #21
 8003958:	d8f6      	bhi.n	8003948 <_printf_i+0x28>
 800395a:	a101      	add	r1, pc, #4	@ (adr r1, 8003960 <_printf_i+0x40>)
 800395c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003960:	080039b9 	.word	0x080039b9
 8003964:	080039cd 	.word	0x080039cd
 8003968:	08003949 	.word	0x08003949
 800396c:	08003949 	.word	0x08003949
 8003970:	08003949 	.word	0x08003949
 8003974:	08003949 	.word	0x08003949
 8003978:	080039cd 	.word	0x080039cd
 800397c:	08003949 	.word	0x08003949
 8003980:	08003949 	.word	0x08003949
 8003984:	08003949 	.word	0x08003949
 8003988:	08003949 	.word	0x08003949
 800398c:	08003acb 	.word	0x08003acb
 8003990:	080039f7 	.word	0x080039f7
 8003994:	08003a85 	.word	0x08003a85
 8003998:	08003949 	.word	0x08003949
 800399c:	08003949 	.word	0x08003949
 80039a0:	08003aed 	.word	0x08003aed
 80039a4:	08003949 	.word	0x08003949
 80039a8:	080039f7 	.word	0x080039f7
 80039ac:	08003949 	.word	0x08003949
 80039b0:	08003949 	.word	0x08003949
 80039b4:	08003a8d 	.word	0x08003a8d
 80039b8:	6833      	ldr	r3, [r6, #0]
 80039ba:	1d1a      	adds	r2, r3, #4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6032      	str	r2, [r6, #0]
 80039c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039c8:	2301      	movs	r3, #1
 80039ca:	e09c      	b.n	8003b06 <_printf_i+0x1e6>
 80039cc:	6833      	ldr	r3, [r6, #0]
 80039ce:	6820      	ldr	r0, [r4, #0]
 80039d0:	1d19      	adds	r1, r3, #4
 80039d2:	6031      	str	r1, [r6, #0]
 80039d4:	0606      	lsls	r6, r0, #24
 80039d6:	d501      	bpl.n	80039dc <_printf_i+0xbc>
 80039d8:	681d      	ldr	r5, [r3, #0]
 80039da:	e003      	b.n	80039e4 <_printf_i+0xc4>
 80039dc:	0645      	lsls	r5, r0, #25
 80039de:	d5fb      	bpl.n	80039d8 <_printf_i+0xb8>
 80039e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039e4:	2d00      	cmp	r5, #0
 80039e6:	da03      	bge.n	80039f0 <_printf_i+0xd0>
 80039e8:	232d      	movs	r3, #45	@ 0x2d
 80039ea:	426d      	negs	r5, r5
 80039ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039f0:	230a      	movs	r3, #10
 80039f2:	4858      	ldr	r0, [pc, #352]	@ (8003b54 <_printf_i+0x234>)
 80039f4:	e011      	b.n	8003a1a <_printf_i+0xfa>
 80039f6:	6821      	ldr	r1, [r4, #0]
 80039f8:	6833      	ldr	r3, [r6, #0]
 80039fa:	0608      	lsls	r0, r1, #24
 80039fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a00:	d402      	bmi.n	8003a08 <_printf_i+0xe8>
 8003a02:	0649      	lsls	r1, r1, #25
 8003a04:	bf48      	it	mi
 8003a06:	b2ad      	uxthmi	r5, r5
 8003a08:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a0a:	6033      	str	r3, [r6, #0]
 8003a0c:	bf14      	ite	ne
 8003a0e:	230a      	movne	r3, #10
 8003a10:	2308      	moveq	r3, #8
 8003a12:	4850      	ldr	r0, [pc, #320]	@ (8003b54 <_printf_i+0x234>)
 8003a14:	2100      	movs	r1, #0
 8003a16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a1a:	6866      	ldr	r6, [r4, #4]
 8003a1c:	2e00      	cmp	r6, #0
 8003a1e:	60a6      	str	r6, [r4, #8]
 8003a20:	db05      	blt.n	8003a2e <_printf_i+0x10e>
 8003a22:	6821      	ldr	r1, [r4, #0]
 8003a24:	432e      	orrs	r6, r5
 8003a26:	f021 0104 	bic.w	r1, r1, #4
 8003a2a:	6021      	str	r1, [r4, #0]
 8003a2c:	d04b      	beq.n	8003ac6 <_printf_i+0x1a6>
 8003a2e:	4616      	mov	r6, r2
 8003a30:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a34:	fb03 5711 	mls	r7, r3, r1, r5
 8003a38:	5dc7      	ldrb	r7, [r0, r7]
 8003a3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a3e:	462f      	mov	r7, r5
 8003a40:	42bb      	cmp	r3, r7
 8003a42:	460d      	mov	r5, r1
 8003a44:	d9f4      	bls.n	8003a30 <_printf_i+0x110>
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d10b      	bne.n	8003a62 <_printf_i+0x142>
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	07df      	lsls	r7, r3, #31
 8003a4e:	d508      	bpl.n	8003a62 <_printf_i+0x142>
 8003a50:	6923      	ldr	r3, [r4, #16]
 8003a52:	6861      	ldr	r1, [r4, #4]
 8003a54:	4299      	cmp	r1, r3
 8003a56:	bfde      	ittt	le
 8003a58:	2330      	movle	r3, #48	@ 0x30
 8003a5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a62:	1b92      	subs	r2, r2, r6
 8003a64:	6122      	str	r2, [r4, #16]
 8003a66:	464b      	mov	r3, r9
 8003a68:	4621      	mov	r1, r4
 8003a6a:	4640      	mov	r0, r8
 8003a6c:	f8cd a000 	str.w	sl, [sp]
 8003a70:	aa03      	add	r2, sp, #12
 8003a72:	f7ff fee3 	bl	800383c <_printf_common>
 8003a76:	3001      	adds	r0, #1
 8003a78:	d14a      	bne.n	8003b10 <_printf_i+0x1f0>
 8003a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7e:	b004      	add	sp, #16
 8003a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	f043 0320 	orr.w	r3, r3, #32
 8003a8a:	6023      	str	r3, [r4, #0]
 8003a8c:	2778      	movs	r7, #120	@ 0x78
 8003a8e:	4832      	ldr	r0, [pc, #200]	@ (8003b58 <_printf_i+0x238>)
 8003a90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	6831      	ldr	r1, [r6, #0]
 8003a98:	061f      	lsls	r7, r3, #24
 8003a9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a9e:	d402      	bmi.n	8003aa6 <_printf_i+0x186>
 8003aa0:	065f      	lsls	r7, r3, #25
 8003aa2:	bf48      	it	mi
 8003aa4:	b2ad      	uxthmi	r5, r5
 8003aa6:	6031      	str	r1, [r6, #0]
 8003aa8:	07d9      	lsls	r1, r3, #31
 8003aaa:	bf44      	itt	mi
 8003aac:	f043 0320 	orrmi.w	r3, r3, #32
 8003ab0:	6023      	strmi	r3, [r4, #0]
 8003ab2:	b11d      	cbz	r5, 8003abc <_printf_i+0x19c>
 8003ab4:	2310      	movs	r3, #16
 8003ab6:	e7ad      	b.n	8003a14 <_printf_i+0xf4>
 8003ab8:	4826      	ldr	r0, [pc, #152]	@ (8003b54 <_printf_i+0x234>)
 8003aba:	e7e9      	b.n	8003a90 <_printf_i+0x170>
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	f023 0320 	bic.w	r3, r3, #32
 8003ac2:	6023      	str	r3, [r4, #0]
 8003ac4:	e7f6      	b.n	8003ab4 <_printf_i+0x194>
 8003ac6:	4616      	mov	r6, r2
 8003ac8:	e7bd      	b.n	8003a46 <_printf_i+0x126>
 8003aca:	6833      	ldr	r3, [r6, #0]
 8003acc:	6825      	ldr	r5, [r4, #0]
 8003ace:	1d18      	adds	r0, r3, #4
 8003ad0:	6961      	ldr	r1, [r4, #20]
 8003ad2:	6030      	str	r0, [r6, #0]
 8003ad4:	062e      	lsls	r6, r5, #24
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	d501      	bpl.n	8003ade <_printf_i+0x1be>
 8003ada:	6019      	str	r1, [r3, #0]
 8003adc:	e002      	b.n	8003ae4 <_printf_i+0x1c4>
 8003ade:	0668      	lsls	r0, r5, #25
 8003ae0:	d5fb      	bpl.n	8003ada <_printf_i+0x1ba>
 8003ae2:	8019      	strh	r1, [r3, #0]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	4616      	mov	r6, r2
 8003ae8:	6123      	str	r3, [r4, #16]
 8003aea:	e7bc      	b.n	8003a66 <_printf_i+0x146>
 8003aec:	6833      	ldr	r3, [r6, #0]
 8003aee:	2100      	movs	r1, #0
 8003af0:	1d1a      	adds	r2, r3, #4
 8003af2:	6032      	str	r2, [r6, #0]
 8003af4:	681e      	ldr	r6, [r3, #0]
 8003af6:	6862      	ldr	r2, [r4, #4]
 8003af8:	4630      	mov	r0, r6
 8003afa:	f000 f96b 	bl	8003dd4 <memchr>
 8003afe:	b108      	cbz	r0, 8003b04 <_printf_i+0x1e4>
 8003b00:	1b80      	subs	r0, r0, r6
 8003b02:	6060      	str	r0, [r4, #4]
 8003b04:	6863      	ldr	r3, [r4, #4]
 8003b06:	6123      	str	r3, [r4, #16]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b0e:	e7aa      	b.n	8003a66 <_printf_i+0x146>
 8003b10:	4632      	mov	r2, r6
 8003b12:	4649      	mov	r1, r9
 8003b14:	4640      	mov	r0, r8
 8003b16:	6923      	ldr	r3, [r4, #16]
 8003b18:	47d0      	blx	sl
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	d0ad      	beq.n	8003a7a <_printf_i+0x15a>
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	079b      	lsls	r3, r3, #30
 8003b22:	d413      	bmi.n	8003b4c <_printf_i+0x22c>
 8003b24:	68e0      	ldr	r0, [r4, #12]
 8003b26:	9b03      	ldr	r3, [sp, #12]
 8003b28:	4298      	cmp	r0, r3
 8003b2a:	bfb8      	it	lt
 8003b2c:	4618      	movlt	r0, r3
 8003b2e:	e7a6      	b.n	8003a7e <_printf_i+0x15e>
 8003b30:	2301      	movs	r3, #1
 8003b32:	4632      	mov	r2, r6
 8003b34:	4649      	mov	r1, r9
 8003b36:	4640      	mov	r0, r8
 8003b38:	47d0      	blx	sl
 8003b3a:	3001      	adds	r0, #1
 8003b3c:	d09d      	beq.n	8003a7a <_printf_i+0x15a>
 8003b3e:	3501      	adds	r5, #1
 8003b40:	68e3      	ldr	r3, [r4, #12]
 8003b42:	9903      	ldr	r1, [sp, #12]
 8003b44:	1a5b      	subs	r3, r3, r1
 8003b46:	42ab      	cmp	r3, r5
 8003b48:	dcf2      	bgt.n	8003b30 <_printf_i+0x210>
 8003b4a:	e7eb      	b.n	8003b24 <_printf_i+0x204>
 8003b4c:	2500      	movs	r5, #0
 8003b4e:	f104 0619 	add.w	r6, r4, #25
 8003b52:	e7f5      	b.n	8003b40 <_printf_i+0x220>
 8003b54:	08003e83 	.word	0x08003e83
 8003b58:	08003e94 	.word	0x08003e94

08003b5c <__sflush_r>:
 8003b5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	0716      	lsls	r6, r2, #28
 8003b64:	4605      	mov	r5, r0
 8003b66:	460c      	mov	r4, r1
 8003b68:	d454      	bmi.n	8003c14 <__sflush_r+0xb8>
 8003b6a:	684b      	ldr	r3, [r1, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	dc02      	bgt.n	8003b76 <__sflush_r+0x1a>
 8003b70:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	dd48      	ble.n	8003c08 <__sflush_r+0xac>
 8003b76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b78:	2e00      	cmp	r6, #0
 8003b7a:	d045      	beq.n	8003c08 <__sflush_r+0xac>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003b82:	682f      	ldr	r7, [r5, #0]
 8003b84:	6a21      	ldr	r1, [r4, #32]
 8003b86:	602b      	str	r3, [r5, #0]
 8003b88:	d030      	beq.n	8003bec <__sflush_r+0x90>
 8003b8a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003b8c:	89a3      	ldrh	r3, [r4, #12]
 8003b8e:	0759      	lsls	r1, r3, #29
 8003b90:	d505      	bpl.n	8003b9e <__sflush_r+0x42>
 8003b92:	6863      	ldr	r3, [r4, #4]
 8003b94:	1ad2      	subs	r2, r2, r3
 8003b96:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003b98:	b10b      	cbz	r3, 8003b9e <__sflush_r+0x42>
 8003b9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b9c:	1ad2      	subs	r2, r2, r3
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	4628      	mov	r0, r5
 8003ba2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ba4:	6a21      	ldr	r1, [r4, #32]
 8003ba6:	47b0      	blx	r6
 8003ba8:	1c43      	adds	r3, r0, #1
 8003baa:	89a3      	ldrh	r3, [r4, #12]
 8003bac:	d106      	bne.n	8003bbc <__sflush_r+0x60>
 8003bae:	6829      	ldr	r1, [r5, #0]
 8003bb0:	291d      	cmp	r1, #29
 8003bb2:	d82b      	bhi.n	8003c0c <__sflush_r+0xb0>
 8003bb4:	4a28      	ldr	r2, [pc, #160]	@ (8003c58 <__sflush_r+0xfc>)
 8003bb6:	40ca      	lsrs	r2, r1
 8003bb8:	07d6      	lsls	r6, r2, #31
 8003bba:	d527      	bpl.n	8003c0c <__sflush_r+0xb0>
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	6062      	str	r2, [r4, #4]
 8003bc0:	6922      	ldr	r2, [r4, #16]
 8003bc2:	04d9      	lsls	r1, r3, #19
 8003bc4:	6022      	str	r2, [r4, #0]
 8003bc6:	d504      	bpl.n	8003bd2 <__sflush_r+0x76>
 8003bc8:	1c42      	adds	r2, r0, #1
 8003bca:	d101      	bne.n	8003bd0 <__sflush_r+0x74>
 8003bcc:	682b      	ldr	r3, [r5, #0]
 8003bce:	b903      	cbnz	r3, 8003bd2 <__sflush_r+0x76>
 8003bd0:	6560      	str	r0, [r4, #84]	@ 0x54
 8003bd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bd4:	602f      	str	r7, [r5, #0]
 8003bd6:	b1b9      	cbz	r1, 8003c08 <__sflush_r+0xac>
 8003bd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003bdc:	4299      	cmp	r1, r3
 8003bde:	d002      	beq.n	8003be6 <__sflush_r+0x8a>
 8003be0:	4628      	mov	r0, r5
 8003be2:	f7ff fbf5 	bl	80033d0 <_free_r>
 8003be6:	2300      	movs	r3, #0
 8003be8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003bea:	e00d      	b.n	8003c08 <__sflush_r+0xac>
 8003bec:	2301      	movs	r3, #1
 8003bee:	4628      	mov	r0, r5
 8003bf0:	47b0      	blx	r6
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	1c50      	adds	r0, r2, #1
 8003bf6:	d1c9      	bne.n	8003b8c <__sflush_r+0x30>
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0c6      	beq.n	8003b8c <__sflush_r+0x30>
 8003bfe:	2b1d      	cmp	r3, #29
 8003c00:	d001      	beq.n	8003c06 <__sflush_r+0xaa>
 8003c02:	2b16      	cmp	r3, #22
 8003c04:	d11d      	bne.n	8003c42 <__sflush_r+0xe6>
 8003c06:	602f      	str	r7, [r5, #0]
 8003c08:	2000      	movs	r0, #0
 8003c0a:	e021      	b.n	8003c50 <__sflush_r+0xf4>
 8003c0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c10:	b21b      	sxth	r3, r3
 8003c12:	e01a      	b.n	8003c4a <__sflush_r+0xee>
 8003c14:	690f      	ldr	r7, [r1, #16]
 8003c16:	2f00      	cmp	r7, #0
 8003c18:	d0f6      	beq.n	8003c08 <__sflush_r+0xac>
 8003c1a:	0793      	lsls	r3, r2, #30
 8003c1c:	bf18      	it	ne
 8003c1e:	2300      	movne	r3, #0
 8003c20:	680e      	ldr	r6, [r1, #0]
 8003c22:	bf08      	it	eq
 8003c24:	694b      	ldreq	r3, [r1, #20]
 8003c26:	1bf6      	subs	r6, r6, r7
 8003c28:	600f      	str	r7, [r1, #0]
 8003c2a:	608b      	str	r3, [r1, #8]
 8003c2c:	2e00      	cmp	r6, #0
 8003c2e:	ddeb      	ble.n	8003c08 <__sflush_r+0xac>
 8003c30:	4633      	mov	r3, r6
 8003c32:	463a      	mov	r2, r7
 8003c34:	4628      	mov	r0, r5
 8003c36:	6a21      	ldr	r1, [r4, #32]
 8003c38:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003c3c:	47e0      	blx	ip
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	dc07      	bgt.n	8003c52 <__sflush_r+0xf6>
 8003c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c4e:	81a3      	strh	r3, [r4, #12]
 8003c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c52:	4407      	add	r7, r0
 8003c54:	1a36      	subs	r6, r6, r0
 8003c56:	e7e9      	b.n	8003c2c <__sflush_r+0xd0>
 8003c58:	20400001 	.word	0x20400001

08003c5c <_fflush_r>:
 8003c5c:	b538      	push	{r3, r4, r5, lr}
 8003c5e:	690b      	ldr	r3, [r1, #16]
 8003c60:	4605      	mov	r5, r0
 8003c62:	460c      	mov	r4, r1
 8003c64:	b913      	cbnz	r3, 8003c6c <_fflush_r+0x10>
 8003c66:	2500      	movs	r5, #0
 8003c68:	4628      	mov	r0, r5
 8003c6a:	bd38      	pop	{r3, r4, r5, pc}
 8003c6c:	b118      	cbz	r0, 8003c76 <_fflush_r+0x1a>
 8003c6e:	6a03      	ldr	r3, [r0, #32]
 8003c70:	b90b      	cbnz	r3, 8003c76 <_fflush_r+0x1a>
 8003c72:	f7ff f9b3 	bl	8002fdc <__sinit>
 8003c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f3      	beq.n	8003c66 <_fflush_r+0xa>
 8003c7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003c80:	07d0      	lsls	r0, r2, #31
 8003c82:	d404      	bmi.n	8003c8e <_fflush_r+0x32>
 8003c84:	0599      	lsls	r1, r3, #22
 8003c86:	d402      	bmi.n	8003c8e <_fflush_r+0x32>
 8003c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c8a:	f7ff fb9e 	bl	80033ca <__retarget_lock_acquire_recursive>
 8003c8e:	4628      	mov	r0, r5
 8003c90:	4621      	mov	r1, r4
 8003c92:	f7ff ff63 	bl	8003b5c <__sflush_r>
 8003c96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c98:	4605      	mov	r5, r0
 8003c9a:	07da      	lsls	r2, r3, #31
 8003c9c:	d4e4      	bmi.n	8003c68 <_fflush_r+0xc>
 8003c9e:	89a3      	ldrh	r3, [r4, #12]
 8003ca0:	059b      	lsls	r3, r3, #22
 8003ca2:	d4e1      	bmi.n	8003c68 <_fflush_r+0xc>
 8003ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ca6:	f7ff fb91 	bl	80033cc <__retarget_lock_release_recursive>
 8003caa:	e7dd      	b.n	8003c68 <_fflush_r+0xc>

08003cac <__swhatbuf_r>:
 8003cac:	b570      	push	{r4, r5, r6, lr}
 8003cae:	460c      	mov	r4, r1
 8003cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb4:	4615      	mov	r5, r2
 8003cb6:	2900      	cmp	r1, #0
 8003cb8:	461e      	mov	r6, r3
 8003cba:	b096      	sub	sp, #88	@ 0x58
 8003cbc:	da0c      	bge.n	8003cd8 <__swhatbuf_r+0x2c>
 8003cbe:	89a3      	ldrh	r3, [r4, #12]
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003cc6:	bf14      	ite	ne
 8003cc8:	2340      	movne	r3, #64	@ 0x40
 8003cca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003cce:	2000      	movs	r0, #0
 8003cd0:	6031      	str	r1, [r6, #0]
 8003cd2:	602b      	str	r3, [r5, #0]
 8003cd4:	b016      	add	sp, #88	@ 0x58
 8003cd6:	bd70      	pop	{r4, r5, r6, pc}
 8003cd8:	466a      	mov	r2, sp
 8003cda:	f000 f849 	bl	8003d70 <_fstat_r>
 8003cde:	2800      	cmp	r0, #0
 8003ce0:	dbed      	blt.n	8003cbe <__swhatbuf_r+0x12>
 8003ce2:	9901      	ldr	r1, [sp, #4]
 8003ce4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003ce8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003cec:	4259      	negs	r1, r3
 8003cee:	4159      	adcs	r1, r3
 8003cf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cf4:	e7eb      	b.n	8003cce <__swhatbuf_r+0x22>

08003cf6 <__smakebuf_r>:
 8003cf6:	898b      	ldrh	r3, [r1, #12]
 8003cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cfa:	079d      	lsls	r5, r3, #30
 8003cfc:	4606      	mov	r6, r0
 8003cfe:	460c      	mov	r4, r1
 8003d00:	d507      	bpl.n	8003d12 <__smakebuf_r+0x1c>
 8003d02:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003d06:	6023      	str	r3, [r4, #0]
 8003d08:	6123      	str	r3, [r4, #16]
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	6163      	str	r3, [r4, #20]
 8003d0e:	b003      	add	sp, #12
 8003d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d12:	466a      	mov	r2, sp
 8003d14:	ab01      	add	r3, sp, #4
 8003d16:	f7ff ffc9 	bl	8003cac <__swhatbuf_r>
 8003d1a:	9f00      	ldr	r7, [sp, #0]
 8003d1c:	4605      	mov	r5, r0
 8003d1e:	4639      	mov	r1, r7
 8003d20:	4630      	mov	r0, r6
 8003d22:	f7ff fbbf 	bl	80034a4 <_malloc_r>
 8003d26:	b948      	cbnz	r0, 8003d3c <__smakebuf_r+0x46>
 8003d28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d2c:	059a      	lsls	r2, r3, #22
 8003d2e:	d4ee      	bmi.n	8003d0e <__smakebuf_r+0x18>
 8003d30:	f023 0303 	bic.w	r3, r3, #3
 8003d34:	f043 0302 	orr.w	r3, r3, #2
 8003d38:	81a3      	strh	r3, [r4, #12]
 8003d3a:	e7e2      	b.n	8003d02 <__smakebuf_r+0xc>
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d46:	81a3      	strh	r3, [r4, #12]
 8003d48:	9b01      	ldr	r3, [sp, #4]
 8003d4a:	6020      	str	r0, [r4, #0]
 8003d4c:	b15b      	cbz	r3, 8003d66 <__smakebuf_r+0x70>
 8003d4e:	4630      	mov	r0, r6
 8003d50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d54:	f000 f81e 	bl	8003d94 <_isatty_r>
 8003d58:	b128      	cbz	r0, 8003d66 <__smakebuf_r+0x70>
 8003d5a:	89a3      	ldrh	r3, [r4, #12]
 8003d5c:	f023 0303 	bic.w	r3, r3, #3
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	81a3      	strh	r3, [r4, #12]
 8003d66:	89a3      	ldrh	r3, [r4, #12]
 8003d68:	431d      	orrs	r5, r3
 8003d6a:	81a5      	strh	r5, [r4, #12]
 8003d6c:	e7cf      	b.n	8003d0e <__smakebuf_r+0x18>
	...

08003d70 <_fstat_r>:
 8003d70:	b538      	push	{r3, r4, r5, lr}
 8003d72:	2300      	movs	r3, #0
 8003d74:	4d06      	ldr	r5, [pc, #24]	@ (8003d90 <_fstat_r+0x20>)
 8003d76:	4604      	mov	r4, r0
 8003d78:	4608      	mov	r0, r1
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	602b      	str	r3, [r5, #0]
 8003d7e:	f7fc feb3 	bl	8000ae8 <_fstat>
 8003d82:	1c43      	adds	r3, r0, #1
 8003d84:	d102      	bne.n	8003d8c <_fstat_r+0x1c>
 8003d86:	682b      	ldr	r3, [r5, #0]
 8003d88:	b103      	cbz	r3, 8003d8c <_fstat_r+0x1c>
 8003d8a:	6023      	str	r3, [r4, #0]
 8003d8c:	bd38      	pop	{r3, r4, r5, pc}
 8003d8e:	bf00      	nop
 8003d90:	20000314 	.word	0x20000314

08003d94 <_isatty_r>:
 8003d94:	b538      	push	{r3, r4, r5, lr}
 8003d96:	2300      	movs	r3, #0
 8003d98:	4d05      	ldr	r5, [pc, #20]	@ (8003db0 <_isatty_r+0x1c>)
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	602b      	str	r3, [r5, #0]
 8003da0:	f7fc feb1 	bl	8000b06 <_isatty>
 8003da4:	1c43      	adds	r3, r0, #1
 8003da6:	d102      	bne.n	8003dae <_isatty_r+0x1a>
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	b103      	cbz	r3, 8003dae <_isatty_r+0x1a>
 8003dac:	6023      	str	r3, [r4, #0]
 8003dae:	bd38      	pop	{r3, r4, r5, pc}
 8003db0:	20000314 	.word	0x20000314

08003db4 <_sbrk_r>:
 8003db4:	b538      	push	{r3, r4, r5, lr}
 8003db6:	2300      	movs	r3, #0
 8003db8:	4d05      	ldr	r5, [pc, #20]	@ (8003dd0 <_sbrk_r+0x1c>)
 8003dba:	4604      	mov	r4, r0
 8003dbc:	4608      	mov	r0, r1
 8003dbe:	602b      	str	r3, [r5, #0]
 8003dc0:	f7fc feb8 	bl	8000b34 <_sbrk>
 8003dc4:	1c43      	adds	r3, r0, #1
 8003dc6:	d102      	bne.n	8003dce <_sbrk_r+0x1a>
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	b103      	cbz	r3, 8003dce <_sbrk_r+0x1a>
 8003dcc:	6023      	str	r3, [r4, #0]
 8003dce:	bd38      	pop	{r3, r4, r5, pc}
 8003dd0:	20000314 	.word	0x20000314

08003dd4 <memchr>:
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	b510      	push	{r4, lr}
 8003dd8:	b2c9      	uxtb	r1, r1
 8003dda:	4402      	add	r2, r0
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	4618      	mov	r0, r3
 8003de0:	d101      	bne.n	8003de6 <memchr+0x12>
 8003de2:	2000      	movs	r0, #0
 8003de4:	e003      	b.n	8003dee <memchr+0x1a>
 8003de6:	7804      	ldrb	r4, [r0, #0]
 8003de8:	3301      	adds	r3, #1
 8003dea:	428c      	cmp	r4, r1
 8003dec:	d1f6      	bne.n	8003ddc <memchr+0x8>
 8003dee:	bd10      	pop	{r4, pc}

08003df0 <_init>:
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	bf00      	nop
 8003df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df6:	bc08      	pop	{r3}
 8003df8:	469e      	mov	lr, r3
 8003dfa:	4770      	bx	lr

08003dfc <_fini>:
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	bf00      	nop
 8003e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e02:	bc08      	pop	{r3}
 8003e04:	469e      	mov	lr, r3
 8003e06:	4770      	bx	lr
